
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800808c  0800808c  0000908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008134  08008134  0000a14c  2**0
                  CONTENTS
  4 .ARM          00000008  08008134  08008134  00009134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800813c  0800813c  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800813c  0800813c  0000913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008140  08008140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08008144  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001598  2000014c  08008290  0000a14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016e4  08008290  0000a6e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fd2  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef3  00000000  00000000  0001b14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0001e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a36  00000000  00000000  0001edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182db  00000000  00000000  0001f80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001252c  00000000  00000000  00037ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000890a9  00000000  00000000  0004a015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d30be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf8  00000000  00000000  000d3104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d6cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008074 	.word	0x08008074

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	08008074 	.word	0x08008074

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fa11 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f83f 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f8d1 	bl	8000734 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000592:	f000 f8a5 	bl	80006e0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000596:	f006 fbbd 	bl	8006d14 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t rx=0;
 800059a:	2300      	movs	r3, #0
 800059c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t tx=0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  char message[32];
  while (1)
  {
  HAL_UART_Transmit(&huart1, &tx, 1, HAL_MAX_DELAY);
 80005a6:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	2201      	movs	r2, #1
 80005b0:	4814      	ldr	r0, [pc, #80]	@ (8000604 <main+0x84>)
 80005b2:	f002 fc21 	bl	8002df8 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, &rx, 1, HAL_MAX_DELAY);
 80005b6:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2201      	movs	r2, #1
 80005c0:	4810      	ldr	r0, [pc, #64]	@ (8000604 <main+0x84>)
 80005c2:	f002 fca4 	bl	8002f0e <HAL_UART_Receive>
  sprintf(message, "Now rx is: %d \r\n", rx);
 80005c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005ca:	461a      	mov	r2, r3
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	490e      	ldr	r1, [pc, #56]	@ (8000608 <main+0x88>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f007 f8af 	bl	8007734 <siprintf>
  CDC_Transmit_FS((uint8_t*)message, strlen(message));
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fe01 	bl	80001e0 <strlen>
 80005de:	4602      	mov	r2, r0
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4611      	mov	r1, r2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f006 fc53 	bl	8006e90 <CDC_Transmit_FS>
  tx++;
 80005ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80005ee:	3301      	adds	r3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fa:	f000 fa49 	bl	8000a90 <HAL_Delay>
  {
 80005fe:	bf00      	nop
 8000600:	e7d1      	b.n	80005a6 <main+0x26>
 8000602:	bf00      	nop
 8000604:	20000168 	.word	0x20000168
 8000608:	0800808c 	.word	0x0800808c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 f8aa 	bl	8007774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	@ (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000658:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <SystemClock_Config+0xd0>)
 800065a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000680:	2310      	movs	r3, #16
 8000682:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000684:	23c0      	movs	r3, #192	@ 0xc0
 8000686:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f001 ff07 	bl	80024a8 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006a0:	f000 f862 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 f96a 	bl	8002998 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f84d 	bl	8000768 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <MX_USART1_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART1_UART_Init+0x4c>)
 8000718:	f002 fb1e 	bl	8002d58 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f821 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000168 	.word	0x20000168
 8000730:	40011000 	.word	0x40011000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <MX_GPIO_Init+0x30>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <MX_GPIO_Init+0x30>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <MX_GPIO_Init+0x30>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000782:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <HAL_MspInit+0x4c>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000788:	6453      	str	r3, [r2, #68]	@ 0x44
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <HAL_MspInit+0x4c>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a19      	ldr	r2, [pc, #100]	@ (8000848 <HAL_UART_MspInit+0x84>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d12c      	bne.n	8000840 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b18      	ldr	r3, [pc, #96]	@ (800084c <HAL_UART_MspInit+0x88>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	4a17      	ldr	r2, [pc, #92]	@ (800084c <HAL_UART_MspInit+0x88>)
 80007f0:	f043 0310 	orr.w	r3, r3, #16
 80007f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <HAL_UART_MspInit+0x88>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <HAL_UART_MspInit+0x88>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a10      	ldr	r2, [pc, #64]	@ (800084c <HAL_UART_MspInit+0x88>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_UART_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800081e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000830:	2307      	movs	r3, #7
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <HAL_UART_MspInit+0x8c>)
 800083c:	f000 fa5e 	bl	8000cfc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	@ 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40011000 	.word	0x40011000
 800084c:	40023800 	.word	0x40023800
 8000850:	40020000 	.word	0x40020000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <NMI_Handler+0x4>

0800085c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <MemManage_Handler+0x4>

0800086c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <BusFault_Handler+0x4>

08000874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <UsageFault_Handler+0x4>

0800087c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008aa:	f000 f8d1 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <OTG_FS_IRQHandler+0x10>)
 80008ba:	f000 fce7 	bl	800128c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000e98 	.word	0x20000e98

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f006 ff44 	bl	8007784 <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	@ (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20010000 	.word	0x20010000
 8000928:	00000400 	.word	0x00000400
 800092c:	200001b0 	.word	0x200001b0
 8000930:	200016e8 	.word	0x200016e8

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000990 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800095c:	f7ff ffea 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f006 ff03 	bl	8007790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fdf9 	bl	8000580 <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 800099c:	08008144 	.word	0x08008144
  ldr r2, =_sbss
 80009a0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80009a4:	200016e4 	.word	0x200016e4

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <HAL_Init+0x40>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_Init+0x40>)
 80009c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <HAL_Init+0x40>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f94f 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	200f      	movs	r0, #15
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff fec8 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023c00 	.word	0x40023c00

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f967 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f92f 	bl	8000c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	@ (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	200001b4 	.word	0x200001b4

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200001b4 	.word	0x200001b4

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff ffee 	bl	8000a78 <HAL_GetTick>
 8000a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <HAL_Delay+0x44>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff ffde 	bl	8000a78 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	@ (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	@ (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	@ (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	@ 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	@ 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff29 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff3e 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff8e 	bl	8000bcc <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5d 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff31 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffa2 	bl	8000c34 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e159      	b.n	8000fcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8148 	bne.w	8000fc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d005      	beq.n	8000d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d130      	bne.n	8000db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 0201 	and.w	r2, r3, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d017      	beq.n	8000dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d123      	bne.n	8000e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	08da      	lsrs	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	69b9      	ldr	r1, [r7, #24]
 8000e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0203 	and.w	r2, r3, #3
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 80a2 	beq.w	8000fc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b57      	ldr	r3, [pc, #348]	@ (8000fe4 <HAL_GPIO_Init+0x2e8>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	4a56      	ldr	r2, [pc, #344]	@ (8000fe4 <HAL_GPIO_Init+0x2e8>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e92:	4b54      	ldr	r3, [pc, #336]	@ (8000fe4 <HAL_GPIO_Init+0x2e8>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9e:	4a52      	ldr	r2, [pc, #328]	@ (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a49      	ldr	r2, [pc, #292]	@ (8000fec <HAL_GPIO_Init+0x2f0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d019      	beq.n	8000efe <HAL_GPIO_Init+0x202>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a48      	ldr	r2, [pc, #288]	@ (8000ff0 <HAL_GPIO_Init+0x2f4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d013      	beq.n	8000efa <HAL_GPIO_Init+0x1fe>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a47      	ldr	r2, [pc, #284]	@ (8000ff4 <HAL_GPIO_Init+0x2f8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00d      	beq.n	8000ef6 <HAL_GPIO_Init+0x1fa>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a46      	ldr	r2, [pc, #280]	@ (8000ff8 <HAL_GPIO_Init+0x2fc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d007      	beq.n	8000ef2 <HAL_GPIO_Init+0x1f6>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a45      	ldr	r2, [pc, #276]	@ (8000ffc <HAL_GPIO_Init+0x300>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_GPIO_Init+0x1f2>
 8000eea:	2304      	movs	r3, #4
 8000eec:	e008      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000eee:	2307      	movs	r3, #7
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e004      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_Init+0x204>
 8000efe:	2300      	movs	r3, #0
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	f002 0203 	and.w	r2, r2, #3
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	4093      	lsls	r3, r2
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f10:	4935      	ldr	r1, [pc, #212]	@ (8000fe8 <HAL_GPIO_Init+0x2ec>)
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	089b      	lsrs	r3, r3, #2
 8000f16:	3302      	adds	r3, #2
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f1e:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f42:	4a2f      	ldr	r2, [pc, #188]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f6c:	4a24      	ldr	r2, [pc, #144]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f72:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f96:	4a1a      	ldr	r2, [pc, #104]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001000 <HAL_GPIO_Init+0x304>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	f67f aea2 	bls.w	8000d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40013800 	.word	0x40013800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020c00 	.word	0x40020c00
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40013c00 	.word	0x40013c00

08001004 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e101      	b.n	800121a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d106      	bne.n	8001036 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f006 f875 	bl	8007120 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001044:	d102      	bne.n	800104c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fc3a 	bl	80038ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7c1a      	ldrb	r2, [r3, #16]
 800105e:	f88d 2000 	strb.w	r2, [sp]
 8001062:	3304      	adds	r3, #4
 8001064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001066:	f002 fb19 	bl	800369c <USB_CoreInit>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0ce      	b.n	800121a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f002 fc32 	bl	80038ec <USB_SetCurrentMode>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2202      	movs	r2, #2
 8001092:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0bf      	b.n	800121a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e04a      	b.n	8001136 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3315      	adds	r3, #21
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	3314      	adds	r3, #20
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	b298      	uxth	r0, r3
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	332e      	adds	r3, #46	@ 0x2e
 80010dc:	4602      	mov	r2, r0
 80010de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	3318      	adds	r3, #24
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	331c      	adds	r3, #28
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3320      	adds	r3, #32
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	3324      	adds	r3, #36	@ 0x24
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	3301      	adds	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3af      	bcc.n	80010a0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e044      	b.n	80011d0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	3301      	adds	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	791b      	ldrb	r3, [r3, #4]
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3b5      	bcc.n	8001146 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7c1a      	ldrb	r2, [r3, #16]
 80011e2:	f88d 2000 	strb.w	r2, [sp]
 80011e6:	3304      	adds	r3, #4
 80011e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ea:	f002 fbcb 	bl	8003984 <USB_DevInit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e00c      	b.n	800121a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fc15 	bl	8004a42 <USB_DevDisconnect>

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_PCD_Start+0x1c>
 800123a:	2302      	movs	r3, #2
 800123c:	e022      	b.n	8001284 <HAL_PCD_Start+0x62>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001256:	2b01      	cmp	r3, #1
 8001258:	d105      	bne.n	8001266 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800125e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fb1c 	bl	80038a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f003 fbc3 	bl	8004a00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b08d      	sub	sp, #52	@ 0x34
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 fc81 	bl	8004baa <USB_GetMode>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 848c 	bne.w	8001bc8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fbe5 	bl	8004a84 <USB_ReadInterrupts>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8482 	beq.w	8001bc6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f003 fbd2 	bl	8004a84 <USB_ReadInterrupts>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d107      	bne.n	80012fa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	695a      	ldr	r2, [r3, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f002 0202 	and.w	r2, r2, #2
 80012f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fbc0 	bl	8004a84 <USB_ReadInterrupts>
 8001304:	4603      	mov	r3, r0
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b10      	cmp	r3, #16
 800130c:	d161      	bne.n	80013d2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0210 	bic.w	r2, r2, #16
 800131c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f003 020f 	and.w	r2, r3, #15
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	3304      	adds	r3, #4
 800133c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	0c5b      	lsrs	r3, r3, #17
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	2b02      	cmp	r3, #2
 8001348:	d124      	bne.n	8001394 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d035      	beq.n	80013c2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001364:	b29b      	uxth	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	6a38      	ldr	r0, [r7, #32]
 800136a:	f003 f9f7 	bl	800475c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137a:	441a      	add	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800138c:	441a      	add	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	e016      	b.n	80013c2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	0c5b      	lsrs	r3, r3, #17
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	2b06      	cmp	r3, #6
 800139e:	d110      	bne.n	80013c2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013a6:	2208      	movs	r2, #8
 80013a8:	4619      	mov	r1, r3
 80013aa:	6a38      	ldr	r0, [r7, #32]
 80013ac:	f003 f9d6 	bl	800475c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	695a      	ldr	r2, [r3, #20]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013bc:	441a      	add	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0210 	orr.w	r2, r2, #16
 80013d0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fb54 	bl	8004a84 <USB_ReadInterrupts>
 80013dc:	4603      	mov	r3, r0
 80013de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013e6:	f040 80a7 	bne.w	8001538 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fb59 	bl	8004aaa <USB_ReadDevAllOutEpInterrupt>
 80013f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80013fa:	e099      	b.n	8001530 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 808e 	beq.w	8001524 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fb7d 	bl	8004b12 <USB_ReadDevOutEPInterrupt>
 8001418:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	015a      	lsls	r2, r3, #5
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	4413      	add	r3, r2
 800142c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001430:	461a      	mov	r2, r3
 8001432:	2301      	movs	r3, #1
 8001434:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001436:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fea3 	bl	8002184 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00c      	beq.n	8001462 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	4413      	add	r3, r2
 8001450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001454:	461a      	mov	r2, r3
 8001456:	2308      	movs	r3, #8
 8001458:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800145a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 ff79 	bl	8002354 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	4413      	add	r3, r2
 8001474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001478:	461a      	mov	r2, r3
 800147a:	2310      	movs	r3, #16
 800147c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d030      	beq.n	80014ea <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001490:	2b80      	cmp	r3, #128	@ 0x80
 8001492:	d109      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4413      	add	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	3304      	adds	r3, #4
 80014bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d108      	bne.n	80014d8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2200      	movs	r2, #0
 80014ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f005 ff20 	bl	8007318 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e4:	461a      	mov	r2, r3
 80014e6:	2302      	movs	r3, #2
 80014e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	015a      	lsls	r2, r3, #5
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001500:	461a      	mov	r2, r3
 8001502:	2320      	movs	r3, #32
 8001504:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800151c:	461a      	mov	r2, r3
 800151e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001522:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	3301      	adds	r3, #1
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800152a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001532:	2b00      	cmp	r3, #0
 8001534:	f47f af62 	bne.w	80013fc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f003 faa1 	bl	8004a84 <USB_ReadInterrupts>
 8001542:	4603      	mov	r3, r0
 8001544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001548:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800154c:	f040 80db 	bne.w	8001706 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fac2 	bl	8004ade <USB_ReadDevAllInEpInterrupt>
 800155a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001560:	e0cd      	b.n	80016fe <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80c2 	beq.w	80016f2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f003 fae8 	bl	8004b4e <USB_ReadDevInEPInterrupt>
 800157e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d057      	beq.n	800163a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	2201      	movs	r2, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800159e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69f9      	ldr	r1, [r7, #28]
 80015a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015aa:	4013      	ands	r3, r2
 80015ac:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015ba:	461a      	mov	r2, r3
 80015bc:	2301      	movs	r3, #1
 80015be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	799b      	ldrb	r3, [r3, #6]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d132      	bne.n	800162e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3320      	adds	r3, #32
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4403      	add	r3, r0
 80015e8:	331c      	adds	r3, #28
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4419      	add	r1, r3
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f2:	4613      	mov	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4403      	add	r3, r0
 80015fc:	3320      	adds	r3, #32
 80015fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	2b00      	cmp	r3, #0
 8001604:	d113      	bne.n	800162e <HAL_PCD_IRQHandler+0x3a2>
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3324      	adds	r3, #36	@ 0x24
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d108      	bne.n	800162e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001626:	461a      	mov	r2, r3
 8001628:	2101      	movs	r1, #1
 800162a:	f003 faef 	bl	8004c0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4619      	mov	r1, r3
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f005 fdf4 	bl	8007222 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	015a      	lsls	r2, r3, #5
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	4413      	add	r3, r2
 800164c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001650:	461a      	mov	r2, r3
 8001652:	2308      	movs	r3, #8
 8001654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	2b00      	cmp	r3, #0
 800165e:	d008      	beq.n	8001672 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	015a      	lsls	r2, r3, #5
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800166c:	461a      	mov	r2, r3
 800166e:	2310      	movs	r3, #16
 8001670:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	015a      	lsls	r2, r3, #5
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	4413      	add	r3, r2
 8001684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001688:	461a      	mov	r2, r3
 800168a:	2340      	movs	r3, #64	@ 0x40
 800168c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d023      	beq.n	80016e0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001698:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800169a:	6a38      	ldr	r0, [r7, #32]
 800169c:	f002 fad6 	bl	8003c4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	3310      	adds	r3, #16
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	3304      	adds	r3, #4
 80016b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	78db      	ldrb	r3, [r3, #3]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d108      	bne.n	80016ce <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2200      	movs	r2, #0
 80016c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f005 fe37 	bl	800733c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	015a      	lsls	r2, r3, #5
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016da:	461a      	mov	r2, r3
 80016dc:	2302      	movs	r3, #2
 80016de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fcbd 	bl	800206c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	3301      	adds	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001700:	2b00      	cmp	r3, #0
 8001702:	f47f af2e 	bne.w	8001562 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f003 f9ba 	bl	8004a84 <USB_ReadInterrupts>
 8001710:	4603      	mov	r3, r0
 8001712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001716:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800171a:	d122      	bne.n	8001762 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001742:	2100      	movs	r1, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fea3 	bl	8002490 <HAL_PCDEx_LPM_Callback>
 800174a:	e002      	b.n	8001752 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f005 fdd5 	bl	80072fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f003 f98c 	bl	8004a84 <USB_ReadInterrupts>
 800176c:	4603      	mov	r3, r0
 800176e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001776:	d112      	bne.n	800179e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b01      	cmp	r3, #1
 8001786:	d102      	bne.n	800178e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f005 fd91 	bl	80072b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800179c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 f96e 	bl	8004a84 <USB_ReadInterrupts>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017b2:	f040 80b7 	bne.w	8001924 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2110      	movs	r1, #16
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fa3b 	bl	8003c4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017da:	e046      	b.n	800186a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017e8:	461a      	mov	r2, r3
 80017ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001800:	0151      	lsls	r1, r2, #5
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	440a      	add	r2, r1
 8001806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800180a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800180e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800181c:	461a      	mov	r2, r3
 800181e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001822:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001834:	0151      	lsls	r1, r2, #5
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	440a      	add	r2, r1
 800183a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800183e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001842:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001846:	015a      	lsls	r2, r3, #5
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	4413      	add	r3, r2
 800184c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001854:	0151      	lsls	r1, r2, #5
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	440a      	add	r2, r1
 800185a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800185e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001862:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001866:	3301      	adds	r3, #1
 8001868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	791b      	ldrb	r3, [r3, #4]
 800186e:	461a      	mov	r2, r3
 8001870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001872:	4293      	cmp	r3, r2
 8001874:	d3b2      	bcc.n	80017dc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001884:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001888:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7bdb      	ldrb	r3, [r3, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a2:	f043 030b 	orr.w	r3, r3, #11
 80018a6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018b8:	f043 030b 	orr.w	r3, r3, #11
 80018bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018be:	e015      	b.n	80018ec <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018d2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e6:	f043 030b 	orr.w	r3, r3, #11
 80018ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018fa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800190e:	461a      	mov	r2, r3
 8001910:	f003 f97c 	bl	8004c0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 f8ab 	bl	8004a84 <USB_ReadInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001938:	d123      	bne.n	8001982 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f003 f941 	bl	8004bc6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f002 f9f8 	bl	8003d3e <USB_GetDevSpeed>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681c      	ldr	r4, [r3, #0]
 800195a:	f001 f9c9 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 800195e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001964:	461a      	mov	r2, r3
 8001966:	4620      	mov	r0, r4
 8001968:	f001 fefc 	bl	8003764 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f005 fc80 	bl	8007272 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001980:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 f87c 	bl	8004a84 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b08      	cmp	r3, #8
 8001994:	d10a      	bne.n	80019ac <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f005 fc5d 	bl	8007256 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f002 0208 	and.w	r2, r2, #8
 80019aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 f867 	bl	8004a84 <USB_ReadInterrupts>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019bc:	2b80      	cmp	r3, #128	@ 0x80
 80019be:	d123      	bne.n	8001a08 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019cc:	2301      	movs	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d0:	e014      	b.n	80019fc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d6:	4613      	mov	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d105      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fb0a 	bl	800200a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	3301      	adds	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	791b      	ldrb	r3, [r3, #4]
 8001a00:	461a      	mov	r2, r3
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d3e4      	bcc.n	80019d2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 f839 	bl	8004a84 <USB_ReadInterrupts>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a1c:	d13c      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a1e:	2301      	movs	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a22:	e02b      	b.n	8001a7c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3318      	adds	r3, #24
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d115      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a4a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da12      	bge.n	8001a76 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3317      	adds	r3, #23
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 faca 	bl	800200a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	3301      	adds	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	791b      	ldrb	r3, [r3, #4]
 8001a80:	461a      	mov	r2, r3
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d3cd      	bcc.n	8001a24 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 fff1 	bl	8004a84 <USB_ReadInterrupts>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001aac:	d156      	bne.n	8001b5c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aae:	2301      	movs	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab2:	e045      	b.n	8001b40 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d12e      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001adc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da2b      	bge.n	8001b3a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	0c1a      	lsrs	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001aec:	4053      	eors	r3, r2
 8001aee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d121      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10a      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b36:	6053      	str	r3, [r2, #4]
            break;
 8001b38:	e008      	b.n	8001b4c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	791b      	ldrb	r3, [r3, #4]
 8001b44:	461a      	mov	r2, r3
 8001b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d3b3      	bcc.n	8001ab4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 ff8f 	bl	8004a84 <USB_ReadInterrupts>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b70:	d10a      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f005 fbf4 	bl	8007360 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f002 ff79 	bl	8004a84 <USB_ReadInterrupts>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d115      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f005 fbe4 	bl	800737c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6859      	ldr	r1, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	e000      	b.n	8001bc8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001bc6:	bf00      	nop
    }
  }
}
 8001bc8:	3734      	adds	r7, #52	@ 0x34
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}

08001bce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_PCD_SetAddress+0x1a>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e012      	b.n	8001c0e <HAL_PCD_SetAddress+0x40>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fed8 	bl	80049b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	4608      	mov	r0, r1
 8001c20:	4611      	mov	r1, r2
 8001c22:	461a      	mov	r2, r3
 8001c24:	4603      	mov	r3, r0
 8001c26:	70fb      	strb	r3, [r7, #3]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	803b      	strh	r3, [r7, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da0f      	bge.n	8001c5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3310      	adds	r3, #16
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	705a      	strb	r2, [r3, #1]
 8001c5a:	e00f      	b.n	8001c7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	f003 020f 	and.w	r2, r3, #15
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	3304      	adds	r3, #4
 8001c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c88:	883b      	ldrh	r3, [r7, #0]
 8001c8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	78ba      	ldrb	r2, [r7, #2]
 8001c96:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001caa:	78bb      	ldrb	r3, [r7, #2]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d102      	bne.n	8001cb6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_PCD_EP_Open+0xae>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e00e      	b.n	8001ce2 <HAL_PCD_EP_Open+0xcc>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68f9      	ldr	r1, [r7, #12]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 f858 	bl	8003d88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ce0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	da0f      	bge.n	8001d1e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	705a      	strb	r2, [r3, #1]
 8001d1c:	e00f      	b.n	8001d3e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	f003 020f 	and.w	r2, r3, #15
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_PCD_EP_Close+0x6e>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e00e      	b.n	8001d76 <HAL_PCD_EP_Close+0x8c>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 f896 	bl	8003e98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d8e:	7afb      	ldrb	r3, [r7, #11]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	799b      	ldrb	r3, [r3, #6]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d102      	bne.n	8001dda <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	799b      	ldrb	r3, [r3, #6]
 8001de2:	461a      	mov	r2, r3
 8001de4:	6979      	ldr	r1, [r7, #20]
 8001de6:	f002 f933 	bl	8004050 <USB_EPStartXfer>

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	460b      	mov	r3, r1
 8001e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	7afb      	ldrb	r3, [r7, #11]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3310      	adds	r3, #16
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2201      	movs	r2, #1
 8001e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	799b      	ldrb	r3, [r3, #6]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	799b      	ldrb	r3, [r3, #6]
 8001e86:	461a      	mov	r2, r3
 8001e88:	6979      	ldr	r1, [r7, #20]
 8001e8a:	f002 f8e1 	bl	8004050 <USB_EPStartXfer>

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	7912      	ldrb	r2, [r2, #4]
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e04f      	b.n	8001f56 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da0f      	bge.n	8001ede <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	3310      	adds	r3, #16
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	705a      	strb	r2, [r3, #1]
 8001edc:	e00d      	b.n	8001efa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_PCD_EP_SetStall+0x82>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e01d      	b.n	8001f56 <HAL_PCD_EP_SetStall+0xbe>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fc6f 	bl	800480c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d109      	bne.n	8001f4c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7999      	ldrb	r1, [r3, #6]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f46:	461a      	mov	r2, r3
 8001f48:	f002 fe60 	bl	8004c0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	7912      	ldrb	r2, [r2, #4]
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e042      	b.n	8002002 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da0f      	bge.n	8001fa4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3310      	adds	r3, #16
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	705a      	strb	r2, [r3, #1]
 8001fa2:	e00f      	b.n	8001fc4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 020f 	and.w	r2, r3, #15
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_PCD_EP_ClrStall+0x86>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e00e      	b.n	8002002 <HAL_PCD_EP_ClrStall+0xa4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fc78 	bl	80048e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da0c      	bge.n	8002038 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	f003 020f 	and.w	r2, r3, #15
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	3310      	adds	r3, #16
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	3304      	adds	r3, #4
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e00c      	b.n	8002052 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	f003 020f 	and.w	r2, r3, #15
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68f9      	ldr	r1, [r7, #12]
 8002058:	4618      	mov	r0, r3
 800205a:	f002 fa97 	bl	800458c <USB_EPStopXfer>
 800205e:	4603      	mov	r3, r0
 8002060:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002062:	7afb      	ldrb	r3, [r7, #11]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	@ 0x28
 8002070:	af02      	add	r7, sp, #8
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	3310      	adds	r3, #16
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d901      	bls.n	80020a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e06b      	b.n	800217c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	69fa      	ldr	r2, [r7, #28]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d902      	bls.n	80020c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	3303      	adds	r3, #3
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020c8:	e02a      	b.n	8002120 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d902      	bls.n	80020e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3303      	adds	r3, #3
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68d9      	ldr	r1, [r3, #12]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f002 faec 	bl	80046e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	441a      	add	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	441a      	add	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4413      	add	r3, r2
 8002128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	429a      	cmp	r2, r3
 8002134:	d809      	bhi.n	800214a <PCD_WriteEmptyTxFifo+0xde>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213e:	429a      	cmp	r2, r3
 8002140:	d203      	bcs.n	800214a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1bf      	bne.n	80020ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	429a      	cmp	r2, r3
 8002154:	d811      	bhi.n	800217a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	2201      	movs	r2, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800216a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	43db      	mvns	r3, r3
 8002170:	6939      	ldr	r1, [r7, #16]
 8002172:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002176:	4013      	ands	r3, r2
 8002178:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	333c      	adds	r3, #60	@ 0x3c
 800219c:	3304      	adds	r3, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	799b      	ldrb	r3, [r3, #6]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d17b      	bne.n	80022b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4a61      	ldr	r2, [pc, #388]	@ (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	f240 80b9 	bls.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b3 	beq.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e6:	461a      	mov	r2, r3
 80021e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ec:	6093      	str	r3, [r2, #8]
 80021ee:	e0a7      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002206:	461a      	mov	r2, r3
 8002208:	2320      	movs	r3, #32
 800220a:	6093      	str	r3, [r2, #8]
 800220c:	e098      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 8093 	bne.w	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	4a4b      	ldr	r2, [pc, #300]	@ (800234c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d90f      	bls.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	e07e      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	0159      	lsls	r1, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	440b      	add	r3, r1
 8002264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d114      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800228c:	461a      	mov	r2, r3
 800228e:	2101      	movs	r1, #1
 8002290:	f002 fcbc 	bl	8004c0c <USB_EP0_OutStart>
 8002294:	e006      	b.n	80022a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	441a      	add	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f004 ff9e 	bl	80071ec <HAL_PCD_DataOutStageCallback>
 80022b0:	e046      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	4a26      	ldr	r2, [pc, #152]	@ (8002350 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d124      	bne.n	8002304 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022d0:	461a      	mov	r2, r3
 80022d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	e032      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	2320      	movs	r3, #32
 80022f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f004 ff75 	bl	80071ec <HAL_PCD_DataOutStageCallback>
 8002302:	e01d      	b.n	8002340 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d114      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800232c:	461a      	mov	r2, r3
 800232e:	2100      	movs	r1, #0
 8002330:	f002 fc6c 	bl	8004c0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f004 ff56 	bl	80071ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	4f54300a 	.word	0x4f54300a
 8002350:	4f54310a 	.word	0x4f54310a

08002354 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	333c      	adds	r3, #60	@ 0x3c
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a15      	ldr	r2, [pc, #84]	@ (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d90e      	bls.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f004 ff0d 	bl	80071c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <PCD_EP_OutSetupPacket_int+0x88>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d90c      	bls.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	799b      	ldrb	r3, [r3, #6]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023c8:	461a      	mov	r2, r3
 80023ca:	2101      	movs	r1, #1
 80023cc:	f002 fc1e 	bl	8004c0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	4f54300a 	.word	0x4f54300a

080023e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023fe:	883b      	ldrh	r3, [r7, #0]
 8002400:	0419      	lsls	r1, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	430a      	orrs	r2, r1
 800240a:	629a      	str	r2, [r3, #40]	@ 0x28
 800240c:	e028      	b.n	8002460 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4413      	add	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800241c:	2300      	movs	r3, #0
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e00d      	b.n	800243e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	3340      	adds	r3, #64	@ 0x40
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4413      	add	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	3b01      	subs	r3, #1
 8002444:	429a      	cmp	r2, r3
 8002446:	d3ec      	bcc.n	8002422 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002448:	883b      	ldrh	r3, [r7, #0]
 800244a:	0418      	lsls	r0, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	3b01      	subs	r3, #1
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4302      	orrs	r2, r0
 8002458:	3340      	adds	r3, #64	@ 0x40
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e267      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d075      	beq.n	80025b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024c6:	4b88      	ldr	r3, [pc, #544]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4b85      	ldr	r3, [pc, #532]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b82      	ldr	r3, [pc, #520]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b7e      	ldr	r3, [pc, #504]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05b      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d157      	bne.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e242      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x74>
 800250e:	4b76      	ldr	r3, [pc, #472]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a75      	ldr	r2, [pc, #468]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b70      	ldr	r3, [pc, #448]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6f      	ldr	r2, [pc, #444]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b6d      	ldr	r3, [pc, #436]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6c      	ldr	r2, [pc, #432]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 8002540:	4b69      	ldr	r3, [pc, #420]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a68      	ldr	r2, [pc, #416]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b66      	ldr	r3, [pc, #408]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a65      	ldr	r2, [pc, #404]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fa8a 	bl	8000a78 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7fe fa86 	bl	8000a78 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e207      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b5b      	ldr	r3, [pc, #364]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xc0>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fa76 	bl	8000a78 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fa72 	bl	8000a78 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1f3      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b51      	ldr	r3, [pc, #324]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025be:	4b4a      	ldr	r3, [pc, #296]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b44      	ldr	r3, [pc, #272]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1c7      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b3b      	ldr	r3, [pc, #236]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4937      	ldr	r1, [pc, #220]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b34      	ldr	r3, [pc, #208]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fa2b 	bl	8000a78 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7fe fa27 	bl	8000a78 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1a8      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b28      	ldr	r3, [pc, #160]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4925      	ldr	r1, [pc, #148]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <HAL_RCC_OscConfig+0x244>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fa0a 	bl	8000a78 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002668:	f7fe fa06 	bl	8000a78 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e187      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d036      	beq.n	8002700 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <HAL_RCC_OscConfig+0x248>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe f9ea 	bl	8000a78 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe f9e6 	bl	8000a78 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e167      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x200>
 80026c6:	e01b      	b.n	8002700 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <HAL_RCC_OscConfig+0x248>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7fe f9d3 	bl	8000a78 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e00e      	b.n	80026f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe f9cf 	bl	8000a78 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d907      	bls.n	80026f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e150      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	42470000 	.word	0x42470000
 80026f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b88      	ldr	r3, [pc, #544]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1ea      	bne.n	80026d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8097 	beq.w	800283c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b81      	ldr	r3, [pc, #516]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b7d      	ldr	r3, [pc, #500]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	4a7c      	ldr	r2, [pc, #496]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	@ 0x40
 800272e:	4b7a      	ldr	r3, [pc, #488]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b77      	ldr	r3, [pc, #476]	@ (800291c <HAL_RCC_OscConfig+0x474>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b74      	ldr	r3, [pc, #464]	@ (800291c <HAL_RCC_OscConfig+0x474>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a73      	ldr	r2, [pc, #460]	@ (800291c <HAL_RCC_OscConfig+0x474>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7fe f98f 	bl	8000a78 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7fe f98b 	bl	8000a78 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e10c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	4b6a      	ldr	r3, [pc, #424]	@ (800291c <HAL_RCC_OscConfig+0x474>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x2ea>
 8002784:	4b64      	ldr	r3, [pc, #400]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	4a63      	ldr	r2, [pc, #396]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x30c>
 800279a:	4b5f      	ldr	r3, [pc, #380]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	4a5e      	ldr	r2, [pc, #376]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x324>
 80027b4:	4b58      	ldr	r3, [pc, #352]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b8:	4a57      	ldr	r2, [pc, #348]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c0:	4b55      	ldr	r3, [pc, #340]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c4:	4a54      	ldr	r2, [pc, #336]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe f950 	bl	8000a78 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe f94c 	bl	8000a78 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e0cb      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	4b49      	ldr	r3, [pc, #292]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCC_OscConfig+0x334>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002800:	f7fe f93a 	bl	8000a78 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe f936 	bl	8000a78 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e0b5      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281e:	4b3e      	ldr	r3, [pc, #248]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ee      	bne.n	8002808 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800282a:	7dfb      	ldrb	r3, [r7, #23]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002830:	4b39      	ldr	r3, [pc, #228]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	4a38      	ldr	r2, [pc, #224]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800283a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a1 	beq.w	8002988 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002846:	4b34      	ldr	r3, [pc, #208]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	d05c      	beq.n	800290c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d141      	bne.n	80028de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <HAL_RCC_OscConfig+0x478>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe f90a 	bl	8000a78 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe f906 	bl	8000a78 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e087      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	491b      	ldr	r1, [pc, #108]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HAL_RCC_OscConfig+0x478>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fe f8df 	bl	8000a78 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe f8db 	bl	8000a78 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e05c      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x416>
 80028dc:	e054      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b10      	ldr	r3, [pc, #64]	@ (8002920 <HAL_RCC_OscConfig+0x478>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe f8c8 	bl	8000a78 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe f8c4 	bl	8000a78 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e045      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <HAL_RCC_OscConfig+0x470>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x444>
 800290a:	e03d      	b.n	8002988 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e038      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000
 8002920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002924:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <HAL_RCC_OscConfig+0x4ec>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d028      	beq.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d121      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d11a      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002954:	4013      	ands	r3, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800295a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295c:	4293      	cmp	r3, r2
 800295e:	d111      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0cc      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b68      	ldr	r3, [pc, #416]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d90c      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b65      	ldr	r3, [pc, #404]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a58      	ldr	r2, [pc, #352]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a52      	ldr	r2, [pc, #328]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d044      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d119      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b3f      	ldr	r3, [pc, #252]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3b      	ldr	r3, [pc, #236]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e067      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4934      	ldr	r1, [pc, #208]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7fd fff6 	bl	8000a78 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fd fff2 	bl	8000a78 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e04f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b25      	ldr	r3, [pc, #148]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d20c      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	@ (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	@ (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd ff56 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00
 8002b54:	40023800 	.word	0x40023800
 8002b58:	080080e8 	.word	0x080080e8
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b68:	b090      	sub	sp, #64	@ 0x40
 8002b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7c:	4b59      	ldr	r3, [pc, #356]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d00d      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	f200 80a1 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x34>
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b96:	e09b      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b53      	ldr	r3, [pc, #332]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b9c:	e09b      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9e:	4b53      	ldr	r3, [pc, #332]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ba2:	e098      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bae:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	623b      	str	r3, [r7, #32]
 8002bc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4b47      	ldr	r3, [pc, #284]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd0:	fb03 f201 	mul.w	r2, r3, r1
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a43      	ldr	r2, [pc, #268]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x188>)
 8002bde:	fba0 1202 	umull	r1, r2, r0, r2
 8002be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002be4:	460a      	mov	r2, r1
 8002be6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bea:	4413      	add	r3, r2
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	61fa      	str	r2, [r7, #28]
 8002bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002bfe:	f7fd fb47 	bl	8000290 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4613      	mov	r3, r2
 8002c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c0a:	e053      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	2200      	movs	r2, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	617a      	str	r2, [r7, #20]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c1e:	f04f 0b00 	mov.w	fp, #0
 8002c22:	4652      	mov	r2, sl
 8002c24:	465b      	mov	r3, fp
 8002c26:	f04f 0000 	mov.w	r0, #0
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	0159      	lsls	r1, r3, #5
 8002c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c34:	0150      	lsls	r0, r2, #5
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c3e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c56:	ebb2 0408 	subs.w	r4, r2, r8
 8002c5a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	00eb      	lsls	r3, r5, #3
 8002c68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6c:	00e2      	lsls	r2, r4, #3
 8002c6e:	4614      	mov	r4, r2
 8002c70:	461d      	mov	r5, r3
 8002c72:	eb14 030a 	adds.w	r3, r4, sl
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	eb45 030b 	adc.w	r3, r5, fp
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	028b      	lsls	r3, r1, #10
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c94:	4621      	mov	r1, r4
 8002c96:	028a      	lsls	r2, r1, #10
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca8:	f7fd faf2 	bl	8000290 <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cce:	e002      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3740      	adds	r7, #64	@ 0x40
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	017d7840 	.word	0x017d7840

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	@ (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	@ (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	080080f8 	.word	0x080080f8

08002d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d34:	f7ff ffdc 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0b5b      	lsrs	r3, r3, #13
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	@ (8002d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	080080f8 	.word	0x080080f8

08002d58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e042      	b.n	8002df0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fd fd20 	bl	80007c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	@ 0x24
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fa09 	bl	80031b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002db0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	@ 0x28
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d175      	bne.n	8002f04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_UART_Transmit+0x2c>
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e06e      	b.n	8002f06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2221      	movs	r2, #33	@ 0x21
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e36:	f7fd fe1f 	bl	8000a78 <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e50:	d108      	bne.n	8002e64 <HAL_UART_Transmit+0x6c>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d104      	bne.n	8002e64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	e003      	b.n	8002e6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e6c:	e02e      	b.n	8002ecc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2180      	movs	r1, #128	@ 0x80
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f8df 	bl	800303c <UART_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e03a      	b.n	8002f06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10b      	bne.n	8002eae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	e007      	b.n	8002ebe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	781a      	ldrb	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1cb      	bne.n	8002e6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2140      	movs	r1, #64	@ 0x40
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f8ab 	bl	800303c <UART_WaitOnFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e006      	b.n	8002f06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f04:	2302      	movs	r3, #2
  }
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b08a      	sub	sp, #40	@ 0x28
 8002f12:	af02      	add	r7, sp, #8
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	f040 8081 	bne.w	8003032 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Receive+0x2e>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e079      	b.n	8003034 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2222      	movs	r2, #34	@ 0x22
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f54:	f7fd fd90 	bl	8000a78 <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f6e:	d108      	bne.n	8002f82 <HAL_UART_Receive+0x74>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d104      	bne.n	8002f82 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e003      	b.n	8002f8a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f8a:	e047      	b.n	800301c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	2120      	movs	r1, #32
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f850 	bl	800303c <UART_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e042      	b.n	8003034 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10c      	bne.n	8002fce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	e01f      	b.n	800300e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd6:	d007      	beq.n	8002fe8 <HAL_UART_Receive+0xda>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <HAL_UART_Receive+0xe8>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e008      	b.n	8003008 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003002:	b2da      	uxtb	r2, r3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1b2      	bne.n	8002f8c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003032:	2302      	movs	r3, #2
  }
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304c:	e03b      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d037      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003056:	f7fd fd0f 	bl	8000a78 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <UART_WaitOnFlagUntilTimeout+0x30>
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e03a      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d023      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b80      	cmp	r3, #128	@ 0x80
 8003082:	d020      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b40      	cmp	r3, #64	@ 0x40
 8003088:	d01d      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b08      	cmp	r3, #8
 8003096:	d116      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f81d 	bl	80030ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2208      	movs	r2, #8
 80030b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00f      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d0b4      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b095      	sub	sp, #84	@ 0x54
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	330c      	adds	r3, #12
 80030fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003100:	e853 3f00 	ldrex	r3, [r3]
 8003104:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800310c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003116:	643a      	str	r2, [r7, #64]	@ 0x40
 8003118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800311c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e5      	bne.n	80030f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3314      	adds	r3, #20
 8003130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	e853 3f00 	ldrex	r3, [r3]
 8003138:	61fb      	str	r3, [r7, #28]
   return(result);
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3314      	adds	r3, #20
 8003148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800314a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800314c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003152:	e841 2300 	strex	r3, r2, [r1]
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e5      	bne.n	800312a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	2b01      	cmp	r3, #1
 8003164:	d119      	bne.n	800319a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
 800316c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	60bb      	str	r3, [r7, #8]
   return(result);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f023 0310 	bic.w	r3, r3, #16
 800317c:	647b      	str	r3, [r7, #68]	@ 0x44
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	330c      	adds	r3, #12
 8003184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003186:	61ba      	str	r2, [r7, #24]
 8003188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	6979      	ldr	r1, [r7, #20]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	613b      	str	r3, [r7, #16]
   return(result);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e5      	bne.n	8003166 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80031a8:	bf00      	nop
 80031aa:	3754      	adds	r7, #84	@ 0x54
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b0c0      	sub	sp, #256	@ 0x100
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	68d9      	ldr	r1, [r3, #12]
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	ea40 0301 	orr.w	r3, r0, r1
 80031dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800320c:	f021 010c 	bic.w	r1, r1, #12
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800321a:	430b      	orrs	r3, r1
 800321c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800321e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322e:	6999      	ldr	r1, [r3, #24]
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	ea40 0301 	orr.w	r3, r0, r1
 800323a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b8f      	ldr	r3, [pc, #572]	@ (8003480 <UART_SetConfig+0x2cc>)
 8003244:	429a      	cmp	r2, r3
 8003246:	d005      	beq.n	8003254 <UART_SetConfig+0xa0>
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b8d      	ldr	r3, [pc, #564]	@ (8003484 <UART_SetConfig+0x2d0>)
 8003250:	429a      	cmp	r2, r3
 8003252:	d104      	bne.n	800325e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003254:	f7ff fd6c 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8003258:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800325c:	e003      	b.n	8003266 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800325e:	f7ff fd53 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003262:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003270:	f040 810c 	bne.w	800348c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003278:	2200      	movs	r2, #0
 800327a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800327e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003282:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	1891      	adds	r1, r2, r2
 800328c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800328e:	415b      	adcs	r3, r3
 8003290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003292:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003296:	4621      	mov	r1, r4
 8003298:	eb12 0801 	adds.w	r8, r2, r1
 800329c:	4629      	mov	r1, r5
 800329e:	eb43 0901 	adc.w	r9, r3, r1
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032b6:	4690      	mov	r8, r2
 80032b8:	4699      	mov	r9, r3
 80032ba:	4623      	mov	r3, r4
 80032bc:	eb18 0303 	adds.w	r3, r8, r3
 80032c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032c4:	462b      	mov	r3, r5
 80032c6:	eb49 0303 	adc.w	r3, r9, r3
 80032ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032e2:	460b      	mov	r3, r1
 80032e4:	18db      	adds	r3, r3, r3
 80032e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80032e8:	4613      	mov	r3, r2
 80032ea:	eb42 0303 	adc.w	r3, r2, r3
 80032ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80032f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032f8:	f7fc ffca 	bl	8000290 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4b61      	ldr	r3, [pc, #388]	@ (8003488 <UART_SetConfig+0x2d4>)
 8003302:	fba3 2302 	umull	r2, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	011c      	lsls	r4, r3, #4
 800330a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003314:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003318:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800331c:	4642      	mov	r2, r8
 800331e:	464b      	mov	r3, r9
 8003320:	1891      	adds	r1, r2, r2
 8003322:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003324:	415b      	adcs	r3, r3
 8003326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003328:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800332c:	4641      	mov	r1, r8
 800332e:	eb12 0a01 	adds.w	sl, r2, r1
 8003332:	4649      	mov	r1, r9
 8003334:	eb43 0b01 	adc.w	fp, r3, r1
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003344:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800334c:	4692      	mov	sl, r2
 800334e:	469b      	mov	fp, r3
 8003350:	4643      	mov	r3, r8
 8003352:	eb1a 0303 	adds.w	r3, sl, r3
 8003356:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800335a:	464b      	mov	r3, r9
 800335c:	eb4b 0303 	adc.w	r3, fp, r3
 8003360:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003370:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003374:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003378:	460b      	mov	r3, r1
 800337a:	18db      	adds	r3, r3, r3
 800337c:	643b      	str	r3, [r7, #64]	@ 0x40
 800337e:	4613      	mov	r3, r2
 8003380:	eb42 0303 	adc.w	r3, r2, r3
 8003384:	647b      	str	r3, [r7, #68]	@ 0x44
 8003386:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800338a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800338e:	f7fc ff7f 	bl	8000290 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4611      	mov	r1, r2
 8003398:	4b3b      	ldr	r3, [pc, #236]	@ (8003488 <UART_SetConfig+0x2d4>)
 800339a:	fba3 2301 	umull	r2, r3, r3, r1
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2264      	movs	r2, #100	@ 0x64
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	1acb      	subs	r3, r1, r3
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033ae:	4b36      	ldr	r3, [pc, #216]	@ (8003488 <UART_SetConfig+0x2d4>)
 80033b0:	fba3 2302 	umull	r2, r3, r3, r2
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033bc:	441c      	add	r4, r3
 80033be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c2:	2200      	movs	r2, #0
 80033c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033d0:	4642      	mov	r2, r8
 80033d2:	464b      	mov	r3, r9
 80033d4:	1891      	adds	r1, r2, r2
 80033d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033d8:	415b      	adcs	r3, r3
 80033da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033e0:	4641      	mov	r1, r8
 80033e2:	1851      	adds	r1, r2, r1
 80033e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80033e6:	4649      	mov	r1, r9
 80033e8:	414b      	adcs	r3, r1
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033f8:	4659      	mov	r1, fp
 80033fa:	00cb      	lsls	r3, r1, #3
 80033fc:	4651      	mov	r1, sl
 80033fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003402:	4651      	mov	r1, sl
 8003404:	00ca      	lsls	r2, r1, #3
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	4603      	mov	r3, r0
 800340c:	4642      	mov	r2, r8
 800340e:	189b      	adds	r3, r3, r2
 8003410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003414:	464b      	mov	r3, r9
 8003416:	460a      	mov	r2, r1
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800342c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003430:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003434:	460b      	mov	r3, r1
 8003436:	18db      	adds	r3, r3, r3
 8003438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800343a:	4613      	mov	r3, r2
 800343c:	eb42 0303 	adc.w	r3, r2, r3
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003446:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800344a:	f7fc ff21 	bl	8000290 <__aeabi_uldivmod>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4b0d      	ldr	r3, [pc, #52]	@ (8003488 <UART_SetConfig+0x2d4>)
 8003454:	fba3 1302 	umull	r1, r3, r3, r2
 8003458:	095b      	lsrs	r3, r3, #5
 800345a:	2164      	movs	r1, #100	@ 0x64
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	3332      	adds	r3, #50	@ 0x32
 8003466:	4a08      	ldr	r2, [pc, #32]	@ (8003488 <UART_SetConfig+0x2d4>)
 8003468:	fba2 2303 	umull	r2, r3, r2, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	f003 0207 	and.w	r2, r3, #7
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4422      	add	r2, r4
 800347a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800347c:	e106      	b.n	800368c <UART_SetConfig+0x4d8>
 800347e:	bf00      	nop
 8003480:	40011000 	.word	0x40011000
 8003484:	40011400 	.word	0x40011400
 8003488:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800348c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003490:	2200      	movs	r2, #0
 8003492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003496:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800349a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800349e:	4642      	mov	r2, r8
 80034a0:	464b      	mov	r3, r9
 80034a2:	1891      	adds	r1, r2, r2
 80034a4:	6239      	str	r1, [r7, #32]
 80034a6:	415b      	adcs	r3, r3
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ae:	4641      	mov	r1, r8
 80034b0:	1854      	adds	r4, r2, r1
 80034b2:	4649      	mov	r1, r9
 80034b4:	eb43 0501 	adc.w	r5, r3, r1
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	00eb      	lsls	r3, r5, #3
 80034c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c6:	00e2      	lsls	r2, r4, #3
 80034c8:	4614      	mov	r4, r2
 80034ca:	461d      	mov	r5, r3
 80034cc:	4643      	mov	r3, r8
 80034ce:	18e3      	adds	r3, r4, r3
 80034d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034d4:	464b      	mov	r3, r9
 80034d6:	eb45 0303 	adc.w	r3, r5, r3
 80034da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034fa:	4629      	mov	r1, r5
 80034fc:	008b      	lsls	r3, r1, #2
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003504:	4621      	mov	r1, r4
 8003506:	008a      	lsls	r2, r1, #2
 8003508:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800350c:	f7fc fec0 	bl	8000290 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b60      	ldr	r3, [pc, #384]	@ (8003698 <UART_SetConfig+0x4e4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003528:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800352c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	61b9      	str	r1, [r7, #24]
 8003538:	415b      	adcs	r3, r3
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003540:	4641      	mov	r1, r8
 8003542:	1851      	adds	r1, r2, r1
 8003544:	6139      	str	r1, [r7, #16]
 8003546:	4649      	mov	r1, r9
 8003548:	414b      	adcs	r3, r1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003558:	4659      	mov	r1, fp
 800355a:	00cb      	lsls	r3, r1, #3
 800355c:	4651      	mov	r1, sl
 800355e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003562:	4651      	mov	r1, sl
 8003564:	00ca      	lsls	r2, r1, #3
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	4603      	mov	r3, r0
 800356c:	4642      	mov	r2, r8
 800356e:	189b      	adds	r3, r3, r2
 8003570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003574:	464b      	mov	r3, r9
 8003576:	460a      	mov	r2, r1
 8003578:	eb42 0303 	adc.w	r3, r2, r3
 800357c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	67bb      	str	r3, [r7, #120]	@ 0x78
 800358a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003598:	4649      	mov	r1, r9
 800359a:	008b      	lsls	r3, r1, #2
 800359c:	4641      	mov	r1, r8
 800359e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a2:	4641      	mov	r1, r8
 80035a4:	008a      	lsls	r2, r1, #2
 80035a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035aa:	f7fc fe71 	bl	8000290 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	4b38      	ldr	r3, [pc, #224]	@ (8003698 <UART_SetConfig+0x4e4>)
 80035b6:	fba3 2301 	umull	r2, r3, r3, r1
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2264      	movs	r2, #100	@ 0x64
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	1acb      	subs	r3, r1, r3
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	3332      	adds	r3, #50	@ 0x32
 80035c8:	4a33      	ldr	r2, [pc, #204]	@ (8003698 <UART_SetConfig+0x4e4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d4:	441c      	add	r4, r3
 80035d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035da:	2200      	movs	r2, #0
 80035dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80035de:	677a      	str	r2, [r7, #116]	@ 0x74
 80035e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	415b      	adcs	r3, r3
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003626:	464b      	mov	r3, r9
 8003628:	460a      	mov	r2, r1
 800362a:	eb42 0303 	adc.w	r3, r2, r3
 800362e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	663b      	str	r3, [r7, #96]	@ 0x60
 800363a:	667a      	str	r2, [r7, #100]	@ 0x64
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003648:	4649      	mov	r1, r9
 800364a:	008b      	lsls	r3, r1, #2
 800364c:	4641      	mov	r1, r8
 800364e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003652:	4641      	mov	r1, r8
 8003654:	008a      	lsls	r2, r1, #2
 8003656:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800365a:	f7fc fe19 	bl	8000290 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4b0d      	ldr	r3, [pc, #52]	@ (8003698 <UART_SetConfig+0x4e4>)
 8003664:	fba3 1302 	umull	r1, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	2164      	movs	r1, #100	@ 0x64
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	3332      	adds	r3, #50	@ 0x32
 8003676:	4a08      	ldr	r2, [pc, #32]	@ (8003698 <UART_SetConfig+0x4e4>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	f003 020f 	and.w	r2, r3, #15
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4422      	add	r2, r4
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003692:	46bd      	mov	sp, r7
 8003694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003698:	51eb851f 	.word	0x51eb851f

0800369c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800369c:	b084      	sub	sp, #16
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	f107 001c 	add.w	r0, r7, #28
 80036aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d123      	bne.n	80036fe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80036ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d105      	bne.n	80036f2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 fae8 	bl	8004cc8 <USB_CoreReset>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e01b      	b.n	8003736 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f001 fadc 	bl	8004cc8 <USB_CoreReset>
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003714:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38
 8003728:	e005      	b.n	8003736 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003736:	7fbb      	ldrb	r3, [r7, #30]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d10b      	bne.n	8003754 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f043 0206 	orr.w	r2, r3, #6
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003760:	b004      	add	sp, #16
 8003762:	4770      	bx	lr

08003764 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d165      	bne.n	8003844 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4a41      	ldr	r2, [pc, #260]	@ (8003880 <USB_SetTurnaroundTime+0x11c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d906      	bls.n	800378e <USB_SetTurnaroundTime+0x2a>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4a40      	ldr	r2, [pc, #256]	@ (8003884 <USB_SetTurnaroundTime+0x120>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d202      	bcs.n	800378e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003788:	230f      	movs	r3, #15
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e062      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4a3c      	ldr	r2, [pc, #240]	@ (8003884 <USB_SetTurnaroundTime+0x120>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d306      	bcc.n	80037a4 <USB_SetTurnaroundTime+0x40>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4a3b      	ldr	r2, [pc, #236]	@ (8003888 <USB_SetTurnaroundTime+0x124>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d202      	bcs.n	80037a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800379e:	230e      	movs	r3, #14
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e057      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4a38      	ldr	r2, [pc, #224]	@ (8003888 <USB_SetTurnaroundTime+0x124>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d306      	bcc.n	80037ba <USB_SetTurnaroundTime+0x56>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a37      	ldr	r2, [pc, #220]	@ (800388c <USB_SetTurnaroundTime+0x128>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d202      	bcs.n	80037ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80037b4:	230d      	movs	r3, #13
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	e04c      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4a33      	ldr	r2, [pc, #204]	@ (800388c <USB_SetTurnaroundTime+0x128>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d306      	bcc.n	80037d0 <USB_SetTurnaroundTime+0x6c>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4a32      	ldr	r2, [pc, #200]	@ (8003890 <USB_SetTurnaroundTime+0x12c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d802      	bhi.n	80037d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037ca:	230c      	movs	r3, #12
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	e041      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003890 <USB_SetTurnaroundTime+0x12c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d906      	bls.n	80037e6 <USB_SetTurnaroundTime+0x82>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4a2e      	ldr	r2, [pc, #184]	@ (8003894 <USB_SetTurnaroundTime+0x130>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d802      	bhi.n	80037e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037e0:	230b      	movs	r3, #11
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	e036      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003894 <USB_SetTurnaroundTime+0x130>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d906      	bls.n	80037fc <USB_SetTurnaroundTime+0x98>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4a29      	ldr	r2, [pc, #164]	@ (8003898 <USB_SetTurnaroundTime+0x134>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d802      	bhi.n	80037fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037f6:	230a      	movs	r3, #10
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e02b      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <USB_SetTurnaroundTime+0x134>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d906      	bls.n	8003812 <USB_SetTurnaroundTime+0xae>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a25      	ldr	r2, [pc, #148]	@ (800389c <USB_SetTurnaroundTime+0x138>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d202      	bcs.n	8003812 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800380c:	2309      	movs	r3, #9
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e020      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4a21      	ldr	r2, [pc, #132]	@ (800389c <USB_SetTurnaroundTime+0x138>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d306      	bcc.n	8003828 <USB_SetTurnaroundTime+0xc4>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4a20      	ldr	r2, [pc, #128]	@ (80038a0 <USB_SetTurnaroundTime+0x13c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d802      	bhi.n	8003828 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003822:	2308      	movs	r3, #8
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	e015      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4a1d      	ldr	r2, [pc, #116]	@ (80038a0 <USB_SetTurnaroundTime+0x13c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d906      	bls.n	800383e <USB_SetTurnaroundTime+0xda>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4a1c      	ldr	r2, [pc, #112]	@ (80038a4 <USB_SetTurnaroundTime+0x140>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d202      	bcs.n	800383e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003838:	2307      	movs	r3, #7
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e00a      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800383e:	2306      	movs	r3, #6
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e007      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800384a:	2309      	movs	r3, #9
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e001      	b.n	8003854 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003850:	2309      	movs	r3, #9
 8003852:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800386c:	431a      	orrs	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	00d8acbf 	.word	0x00d8acbf
 8003884:	00e4e1c0 	.word	0x00e4e1c0
 8003888:	00f42400 	.word	0x00f42400
 800388c:	01067380 	.word	0x01067380
 8003890:	011a499f 	.word	0x011a499f
 8003894:	01312cff 	.word	0x01312cff
 8003898:	014ca43f 	.word	0x014ca43f
 800389c:	016e3600 	.word	0x016e3600
 80038a0:	01a6ab1f 	.word	0x01a6ab1f
 80038a4:	01e84800 	.word	0x01e84800

080038a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f023 0201 	bic.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d115      	bne.n	800393a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800391a:	200a      	movs	r0, #10
 800391c:	f7fd f8b8 	bl	8000a90 <HAL_Delay>
      ms += 10U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	330a      	adds	r3, #10
 8003924:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f001 f93f 	bl	8004baa <USB_GetMode>
 800392c:	4603      	mov	r3, r0
 800392e:	2b01      	cmp	r3, #1
 8003930:	d01e      	beq.n	8003970 <USB_SetCurrentMode+0x84>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2bc7      	cmp	r3, #199	@ 0xc7
 8003936:	d9f0      	bls.n	800391a <USB_SetCurrentMode+0x2e>
 8003938:	e01a      	b.n	8003970 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d115      	bne.n	800396c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800394c:	200a      	movs	r0, #10
 800394e:	f7fd f89f 	bl	8000a90 <HAL_Delay>
      ms += 10U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	330a      	adds	r3, #10
 8003956:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f001 f926 	bl	8004baa <USB_GetMode>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <USB_SetCurrentMode+0x84>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2bc7      	cmp	r3, #199	@ 0xc7
 8003968:	d9f0      	bls.n	800394c <USB_SetCurrentMode+0x60>
 800396a:	e001      	b.n	8003970 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e005      	b.n	800397c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2bc8      	cmp	r3, #200	@ 0xc8
 8003974:	d101      	bne.n	800397a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003984:	b084      	sub	sp, #16
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	e009      	b.n	80039b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	3340      	adds	r3, #64	@ 0x40
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	2200      	movs	r2, #0
 80039b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	3301      	adds	r3, #1
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b0e      	cmp	r3, #14
 80039bc:	d9f2      	bls.n	80039a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d11c      	bne.n	8003a00 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80039fe:	e00b      	b.n	8003a18 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2300      	movs	r3, #0
 8003a22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d10d      	bne.n	8003a48 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d104      	bne.n	8003a3e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a34:	2100      	movs	r1, #0
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f968 	bl	8003d0c <USB_SetDevSpeed>
 8003a3c:	e008      	b.n	8003a50 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a3e:	2101      	movs	r1, #1
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f963 	bl	8003d0c <USB_SetDevSpeed>
 8003a46:	e003      	b.n	8003a50 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a48:	2103      	movs	r1, #3
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f95e 	bl	8003d0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a50:	2110      	movs	r1, #16
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8fa 	bl	8003c4c <USB_FlushTxFifo>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f924 	bl	8003cb0 <USB_FlushRxFifo>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a84:	461a      	mov	r2, r3
 8003a86:	2300      	movs	r3, #0
 8003a88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a90:	461a      	mov	r2, r3
 8003a92:	2300      	movs	r3, #0
 8003a94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e043      	b.n	8003b24 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab2:	d118      	bne.n	8003ae6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e013      	b.n	8003af8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003adc:	461a      	mov	r2, r3
 8003ade:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e008      	b.n	8003af8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af2:	461a      	mov	r2, r3
 8003af4:	2300      	movs	r3, #0
 8003af6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b04:	461a      	mov	r2, r3
 8003b06:	2300      	movs	r3, #0
 8003b08:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b16:	461a      	mov	r2, r3
 8003b18:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	3301      	adds	r3, #1
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b28:	461a      	mov	r2, r3
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d3b5      	bcc.n	8003a9c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	e043      	b.n	8003bbe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b4c:	d118      	bne.n	8003b80 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b60:	461a      	mov	r2, r3
 8003b62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	e013      	b.n	8003b92 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b76:	461a      	mov	r2, r3
 8003b78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e008      	b.n	8003b92 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d3b5      	bcc.n	8003b36 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bdc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003bea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f043 0210 	orr.w	r2, r3, #16
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <USB_DevInit+0x2c4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f043 0208 	orr.w	r2, r3, #8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c20:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d107      	bne.n	8003c38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c30:	f043 0304 	orr.w	r3, r3, #4
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c44:	b004      	add	sp, #16
 8003c46:	4770      	bx	lr
 8003c48:	803c3800 	.word	0x803c3800

08003c4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c66:	d901      	bls.n	8003c6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e01b      	b.n	8003ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	daf2      	bge.n	8003c5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	019b      	lsls	r3, r3, #6
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3301      	adds	r3, #1
 8003c88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c90:	d901      	bls.n	8003c96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e006      	b.n	8003ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d0f0      	beq.n	8003c84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cc8:	d901      	bls.n	8003cce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e018      	b.n	8003d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	daf2      	bge.n	8003cbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2210      	movs	r2, #16
 8003cde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cec:	d901      	bls.n	8003cf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e006      	b.n	8003d00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d0f0      	beq.n	8003ce0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	68f9      	ldr	r1, [r7, #12]
 8003d28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 0306 	and.w	r3, r3, #6
 8003d56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]
 8003d62:	e00a      	b.n	8003d7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d002      	beq.n	8003d70 <USB_GetDevSpeed+0x32>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b06      	cmp	r3, #6
 8003d6e:	d102      	bne.n	8003d76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d70:	2302      	movs	r3, #2
 8003d72:	75fb      	strb	r3, [r7, #23]
 8003d74:	e001      	b.n	8003d7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d76:	230f      	movs	r3, #15
 8003d78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d13a      	bne.n	8003e1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	2101      	movs	r1, #1
 8003db6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d155      	bne.n	8003e88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	791b      	ldrb	r3, [r3, #4]
 8003df6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003df8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	059b      	lsls	r3, r3, #22
 8003dfe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e00:	4313      	orrs	r3, r2
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	e036      	b.n	8003e88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	68f9      	ldr	r1, [r7, #12]
 8003e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11a      	bne.n	8003e88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	791b      	ldrb	r3, [r3, #4]
 8003e6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d161      	bne.n	8003f78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eca:	d11f      	bne.n	8003f0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	0151      	lsls	r1, r2, #5
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	440a      	add	r2, r1
 8003ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ee6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003eea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	0151      	lsls	r1, r2, #5
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	440a      	add	r2, r1
 8003f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	2101      	movs	r1, #1
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f50:	4013      	ands	r3, r2
 8003f52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	0159      	lsls	r1, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	440b      	add	r3, r1
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4b35      	ldr	r3, [pc, #212]	@ (8004048 <USB_DeactivateEndpoint+0x1b0>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]
 8003f76:	e060      	b.n	800403a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f8e:	d11f      	bne.n	8003fd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003faa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	041b      	lsls	r3, r3, #16
 800400c:	43db      	mvns	r3, r3
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004014:	4013      	ands	r3, r2
 8004016:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	0159      	lsls	r1, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	440b      	add	r3, r1
 800402e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004032:	4619      	mov	r1, r3
 8004034:	4b05      	ldr	r3, [pc, #20]	@ (800404c <USB_DeactivateEndpoint+0x1b4>)
 8004036:	4013      	ands	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	ec337800 	.word	0xec337800
 800404c:	eff37800 	.word	0xeff37800

08004050 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	@ 0x28
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b01      	cmp	r3, #1
 800406e:	f040 817f 	bne.w	8004370 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d132      	bne.n	80040e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	0151      	lsls	r1, r2, #5
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	440a      	add	r2, r1
 8004090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004094:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004098:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800409c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d8:	0cdb      	lsrs	r3, r3, #19
 80040da:	04db      	lsls	r3, r3, #19
 80040dc:	6113      	str	r3, [r2, #16]
 80040de:	e097      	b.n	8004210 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040fa:	0cdb      	lsrs	r3, r3, #19
 80040fc:	04db      	lsls	r3, r3, #19
 80040fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800411a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800411e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004122:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11a      	bne.n	8004160 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	429a      	cmp	r2, r3
 8004134:	d903      	bls.n	800413e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004158:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800415c:	6113      	str	r3, [r2, #16]
 800415e:	e044      	b.n	80041ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4413      	add	r3, r2
 800416a:	1e5a      	subs	r2, r3, #1
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	8afb      	ldrh	r3, [r7, #22]
 8004186:	04d9      	lsls	r1, r3, #19
 8004188:	4ba4      	ldr	r3, [pc, #656]	@ (800441c <USB_EPStartXfer+0x3cc>)
 800418a:	400b      	ands	r3, r1
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	0148      	lsls	r0, r1, #5
 8004190:	69f9      	ldr	r1, [r7, #28]
 8004192:	4401      	add	r1, r0
 8004194:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004198:	4313      	orrs	r3, r2
 800419a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	791b      	ldrb	r3, [r3, #4]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d122      	bne.n	80041ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	0151      	lsls	r1, r2, #5
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	440a      	add	r2, r1
 80041ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80041c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	8afb      	ldrh	r3, [r7, #22]
 80041d4:	075b      	lsls	r3, r3, #29
 80041d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80041da:	69b9      	ldr	r1, [r7, #24]
 80041dc:	0148      	lsls	r0, r1, #5
 80041de:	69f9      	ldr	r1, [r7, #28]
 80041e0:	4401      	add	r1, r0
 80041e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80041e6:	4313      	orrs	r3, r2
 80041e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	0148      	lsls	r0, r1, #5
 8004204:	69f9      	ldr	r1, [r7, #28]
 8004206:	4401      	add	r1, r0
 8004208:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800420c:	4313      	orrs	r3, r2
 800420e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d14b      	bne.n	80042ae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	791b      	ldrb	r3, [r3, #4]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d128      	bne.n	800428c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d110      	bne.n	800426c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	0151      	lsls	r1, r2, #5
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	440a      	add	r2, r1
 8004260:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004264:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e00f      	b.n	800428c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e166      	b.n	800457c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	0151      	lsls	r1, r2, #5
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	440a      	add	r2, r1
 80042c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80042cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	791b      	ldrb	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d015      	beq.n	8004302 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 814e 	beq.w	800457c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	69f9      	ldr	r1, [r7, #28]
 80042f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042fc:	4313      	orrs	r3, r2
 80042fe:	634b      	str	r3, [r1, #52]	@ 0x34
 8004300:	e13c      	b.n	800457c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d110      	bne.n	8004334 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800432c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e00f      	b.n	8004354 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800434e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004352:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	68d9      	ldr	r1, [r3, #12]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	b298      	uxth	r0, r3
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	4603      	mov	r3, r0
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f9b9 	bl	80046e0 <USB_WritePacket>
 800436e:	e105      	b.n	800457c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	440a      	add	r2, r1
 8004386:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800438a:	0cdb      	lsrs	r3, r3, #19
 800438c:	04db      	lsls	r3, r3, #19
 800438e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80043ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80043b2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d132      	bne.n	8004420 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e8:	69b9      	ldr	r1, [r7, #24]
 80043ea:	0148      	lsls	r0, r1, #5
 80043ec:	69f9      	ldr	r1, [r7, #28]
 80043ee:	4401      	add	r1, r0
 80043f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043f4:	4313      	orrs	r3, r2
 80043f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004412:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004416:	6113      	str	r3, [r2, #16]
 8004418:	e062      	b.n	80044e0 <USB_EPStartXfer+0x490>
 800441a:	bf00      	nop
 800441c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d123      	bne.n	8004470 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443e:	69b9      	ldr	r1, [r7, #24]
 8004440:	0148      	lsls	r0, r1, #5
 8004442:	69f9      	ldr	r1, [r7, #28]
 8004444:	4401      	add	r1, r0
 8004446:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800444a:	4313      	orrs	r3, r2
 800444c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	440a      	add	r2, r1
 8004464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004468:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800446c:	6113      	str	r3, [r2, #16]
 800446e:	e037      	b.n	80044e0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4413      	add	r3, r2
 800447a:	1e5a      	subs	r2, r3, #1
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	8afa      	ldrh	r2, [r7, #22]
 800448c:	fb03 f202 	mul.w	r2, r3, r2
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	8afb      	ldrh	r3, [r7, #22]
 80044a4:	04d9      	lsls	r1, r3, #19
 80044a6:	4b38      	ldr	r3, [pc, #224]	@ (8004588 <USB_EPStartXfer+0x538>)
 80044a8:	400b      	ands	r3, r1
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	0148      	lsls	r0, r1, #5
 80044ae:	69f9      	ldr	r1, [r7, #28]
 80044b0:	4401      	add	r1, r0
 80044b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044b6:	4313      	orrs	r3, r2
 80044b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d0:	69b9      	ldr	r1, [r7, #24]
 80044d2:	0148      	lsls	r0, r1, #5
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	4401      	add	r1, r0
 80044d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d10d      	bne.n	8004502 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	68d9      	ldr	r1, [r3, #12]
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fe:	460a      	mov	r2, r1
 8004500:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	791b      	ldrb	r3, [r3, #4]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d128      	bne.n	800455c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d110      	bne.n	800453c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	0151      	lsls	r1, r2, #5
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	440a      	add	r2, r1
 8004530:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004534:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e00f      	b.n	800455c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	0151      	lsls	r1, r2, #5
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	440a      	add	r2, r1
 8004552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004576:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800457a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	1ff80000 	.word	0x1ff80000

0800458c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d14a      	bne.n	8004640 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045c2:	f040 8086 	bne.w	80046d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	7812      	ldrb	r2, [r2, #0]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004608:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800460c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f242 7210 	movw	r2, #10000	@ 0x2710
 800461a:	4293      	cmp	r3, r2
 800461c:	d902      	bls.n	8004624 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	75fb      	strb	r3, [r7, #23]
          break;
 8004622:	e056      	b.n	80046d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004638:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800463c:	d0e7      	beq.n	800460e <USB_EPStopXfer+0x82>
 800463e:	e048      	b.n	80046d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004658:	d13b      	bne.n	80046d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004678:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800467c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	0151      	lsls	r1, r2, #5
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	440a      	add	r2, r1
 8004698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800469c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3301      	adds	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d902      	bls.n	80046b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
          break;
 80046b6:	e00c      	b.n	80046d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046d0:	d0e7      	beq.n	80046a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b089      	sub	sp, #36	@ 0x24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	4611      	mov	r1, r2
 80046ec:	461a      	mov	r2, r3
 80046ee:	460b      	mov	r3, r1
 80046f0:	71fb      	strb	r3, [r7, #7]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d123      	bne.n	800474e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004706:	88bb      	ldrh	r3, [r7, #4]
 8004708:	3303      	adds	r3, #3
 800470a:	089b      	lsrs	r3, r3, #2
 800470c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e018      	b.n	8004746 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	031a      	lsls	r2, r3, #12
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	4413      	add	r3, r2
 800471c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004720:	461a      	mov	r2, r3
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	3301      	adds	r3, #1
 800472c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3301      	adds	r3, #1
 8004732:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	3301      	adds	r3, #1
 8004738:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3301      	adds	r3, #1
 800473e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	3301      	adds	r3, #1
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	429a      	cmp	r2, r3
 800474c:	d3e2      	bcc.n	8004714 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3724      	adds	r7, #36	@ 0x24
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800475c:	b480      	push	{r7}
 800475e:	b08b      	sub	sp, #44	@ 0x2c
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	089b      	lsrs	r3, r3, #2
 8004776:	b29b      	uxth	r3, r3
 8004778:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004782:	2300      	movs	r3, #0
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	e014      	b.n	80047b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	601a      	str	r2, [r3, #0]
    pDest++;
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	3301      	adds	r3, #1
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	3301      	adds	r3, #1
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	3301      	adds	r3, #1
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	3301      	adds	r3, #1
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	3301      	adds	r3, #1
 80047b0:	623b      	str	r3, [r7, #32]
 80047b2:	6a3a      	ldr	r2, [r7, #32]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d3e6      	bcc.n	8004788 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047ba:	8bfb      	ldrh	r3, [r7, #30]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01e      	beq.n	80047fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047ca:	461a      	mov	r2, r3
 80047cc:	f107 0310 	add.w	r3, r7, #16
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	701a      	strb	r2, [r3, #0]
      i++;
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	3301      	adds	r3, #1
 80047ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	3301      	adds	r3, #1
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80047f2:	8bfb      	ldrh	r3, [r7, #30]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047f8:	8bfb      	ldrh	r3, [r7, #30]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1ea      	bne.n	80047d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004800:	4618      	mov	r0, r3
 8004802:	372c      	adds	r7, #44	@ 0x2c
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d12c      	bne.n	8004882 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	db12      	blt.n	8004860 <USB_EPSetStall+0x54>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00f      	beq.n	8004860 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800485a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800485e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	0151      	lsls	r1, r2, #5
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	440a      	add	r2, r1
 8004876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800487a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	e02b      	b.n	80048da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	db12      	blt.n	80048ba <USB_EPSetStall+0xae>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00f      	beq.n	80048ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d128      	bne.n	8004956 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	440a      	add	r2, r1
 800491a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800491e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004922:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	791b      	ldrb	r3, [r3, #4]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d003      	beq.n	8004934 <USB_EPClearStall+0x4c>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	791b      	ldrb	r3, [r3, #4]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d138      	bne.n	80049a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	e027      	b.n	80049a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	440a      	add	r2, r1
 800496c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004970:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004974:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	791b      	ldrb	r3, [r3, #4]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d003      	beq.n	8004986 <USB_EPClearStall+0x9e>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	791b      	ldrb	r3, [r3, #4]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d10f      	bne.n	80049a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80049d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a2e:	f023 0302 	bic.w	r3, r3, #2
 8004a32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a5c:	f023 0303 	bic.w	r3, r3, #3
 8004a60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a70:	f043 0302 	orr.w	r3, r3, #2
 8004a74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	0c1b      	lsrs	r3, r3, #16
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	4013      	ands	r3, r2
 8004b00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	b29b      	uxth	r3, r3
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b40:	68bb      	ldr	r3, [r7, #8]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b087      	sub	sp, #28
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	460b      	mov	r3, r1
 8004b58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	01db      	lsls	r3, r3, #7
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004be0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004be4:	f023 0307 	bic.w	r3, r3, #7
 8004be8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	460b      	mov	r3, r1
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	333c      	adds	r3, #60	@ 0x3c
 8004c22:	3304      	adds	r3, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4a26      	ldr	r2, [pc, #152]	@ (8004cc4 <USB_EP0_OutStart+0xb8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d90a      	bls.n	8004c46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c40:	d101      	bne.n	8004c46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e037      	b.n	8004cb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c74:	f043 0318 	orr.w	r3, r3, #24
 8004c78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c88:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004c8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c8e:	7afb      	ldrb	r3, [r7, #11]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d10f      	bne.n	8004cb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004cb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	4f54300a 	.word	0x4f54300a

08004cc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ce0:	d901      	bls.n	8004ce6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e022      	b.n	8004d2c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	daf2      	bge.n	8004cd4 <USB_CoreReset+0xc>

  count = 10U;
 8004cee:	230a      	movs	r3, #10
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004cf2:	e002      	b.n	8004cfa <USB_CoreReset+0x32>
  {
    count--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f9      	bne.n	8004cf4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f043 0201 	orr.w	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d18:	d901      	bls.n	8004d1e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e006      	b.n	8004d2c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d0f0      	beq.n	8004d0c <USB_CoreReset+0x44>

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d44:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004d48:	f002 fcb0 	bl	80076ac <USBD_static_malloc>
 8004d4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d109      	bne.n	8004d68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	32b0      	adds	r2, #176	@ 0xb0
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d64:	2302      	movs	r3, #2
 8004d66:	e0d4      	b.n	8004f12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004d68:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f002 fd00 	bl	8007774 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	32b0      	adds	r2, #176	@ 0xb0
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	32b0      	adds	r2, #176	@ 0xb0
 8004d8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7c1b      	ldrb	r3, [r3, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d138      	bne.n	8004e12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004da0:	4b5e      	ldr	r3, [pc, #376]	@ (8004f1c <USBD_CDC_Init+0x1e4>)
 8004da2:	7819      	ldrb	r1, [r3, #0]
 8004da4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004da8:	2202      	movs	r2, #2
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f002 fb5b 	bl	8007466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004db0:	4b5a      	ldr	r3, [pc, #360]	@ (8004f1c <USBD_CDC_Init+0x1e4>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 020f 	and.w	r2, r3, #15
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	3323      	adds	r3, #35	@ 0x23
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004dca:	4b55      	ldr	r3, [pc, #340]	@ (8004f20 <USBD_CDC_Init+0x1e8>)
 8004dcc:	7819      	ldrb	r1, [r3, #0]
 8004dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f002 fb46 	bl	8007466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004dda:	4b51      	ldr	r3, [pc, #324]	@ (8004f20 <USBD_CDC_Init+0x1e8>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	f003 020f 	and.w	r2, r3, #15
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004df6:	4b4b      	ldr	r3, [pc, #300]	@ (8004f24 <USBD_CDC_Init+0x1ec>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f003 020f 	and.w	r2, r3, #15
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	331c      	adds	r3, #28
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e035      	b.n	8004e7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e12:	4b42      	ldr	r3, [pc, #264]	@ (8004f1c <USBD_CDC_Init+0x1e4>)
 8004e14:	7819      	ldrb	r1, [r3, #0]
 8004e16:	2340      	movs	r3, #64	@ 0x40
 8004e18:	2202      	movs	r2, #2
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f002 fb23 	bl	8007466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e20:	4b3e      	ldr	r3, [pc, #248]	@ (8004f1c <USBD_CDC_Init+0x1e4>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	f003 020f 	and.w	r2, r3, #15
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	3323      	adds	r3, #35	@ 0x23
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e3a:	4b39      	ldr	r3, [pc, #228]	@ (8004f20 <USBD_CDC_Init+0x1e8>)
 8004e3c:	7819      	ldrb	r1, [r3, #0]
 8004e3e:	2340      	movs	r3, #64	@ 0x40
 8004e40:	2202      	movs	r2, #2
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f002 fb0f 	bl	8007466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e48:	4b35      	ldr	r3, [pc, #212]	@ (8004f20 <USBD_CDC_Init+0x1e8>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	f003 020f 	and.w	r2, r3, #15
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e64:	4b2f      	ldr	r3, [pc, #188]	@ (8004f24 <USBD_CDC_Init+0x1ec>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	331c      	adds	r3, #28
 8004e7a:	2210      	movs	r2, #16
 8004e7c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e7e:	4b29      	ldr	r3, [pc, #164]	@ (8004f24 <USBD_CDC_Init+0x1ec>)
 8004e80:	7819      	ldrb	r1, [r3, #0]
 8004e82:	2308      	movs	r3, #8
 8004e84:	2203      	movs	r2, #3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f002 faed 	bl	8007466 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004e8c:	4b25      	ldr	r3, [pc, #148]	@ (8004f24 <USBD_CDC_Init+0x1ec>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 020f 	and.w	r2, r3, #15
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3323      	adds	r3, #35	@ 0x23
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	33b0      	adds	r3, #176	@ 0xb0
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004edc:	2302      	movs	r3, #2
 8004ede:	e018      	b.n	8004f12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7c1b      	ldrb	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8004f20 <USBD_CDC_Init+0x1e8>)
 8004eea:	7819      	ldrb	r1, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f002 fba4 	bl	8007644 <USBD_LL_PrepareReceive>
 8004efc:	e008      	b.n	8004f10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004efe:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <USBD_CDC_Init+0x1e8>)
 8004f00:	7819      	ldrb	r1, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004f08:	2340      	movs	r3, #64	@ 0x40
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f002 fb9a 	bl	8007644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000093 	.word	0x20000093
 8004f20:	20000094 	.word	0x20000094
 8004f24:	20000095 	.word	0x20000095

08004f28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004f34:	4b3a      	ldr	r3, [pc, #232]	@ (8005020 <USBD_CDC_DeInit+0xf8>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f002 fab9 	bl	80074b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004f40:	4b37      	ldr	r3, [pc, #220]	@ (8005020 <USBD_CDC_DeInit+0xf8>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f003 020f 	and.w	r2, r3, #15
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3323      	adds	r3, #35	@ 0x23
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004f5a:	4b32      	ldr	r3, [pc, #200]	@ (8005024 <USBD_CDC_DeInit+0xfc>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f002 faa6 	bl	80074b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004f66:	4b2f      	ldr	r3, [pc, #188]	@ (8005024 <USBD_CDC_DeInit+0xfc>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	f003 020f 	and.w	r2, r3, #15
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004f82:	4b29      	ldr	r3, [pc, #164]	@ (8005028 <USBD_CDC_DeInit+0x100>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f002 fa92 	bl	80074b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004f8e:	4b26      	ldr	r3, [pc, #152]	@ (8005028 <USBD_CDC_DeInit+0x100>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	f003 020f 	and.w	r2, r3, #15
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	3323      	adds	r3, #35	@ 0x23
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8005028 <USBD_CDC_DeInit+0x100>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	f003 020f 	and.w	r2, r3, #15
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	331c      	adds	r3, #28
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	32b0      	adds	r2, #176	@ 0xb0
 8004fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01f      	beq.n	8005014 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	33b0      	adds	r3, #176	@ 0xb0
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	32b0      	adds	r2, #176	@ 0xb0
 8004ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f002 fb66 	bl	80076c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	32b0      	adds	r2, #176	@ 0xb0
 8005006:	2100      	movs	r1, #0
 8005008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000093 	.word	0x20000093
 8005024:	20000094 	.word	0x20000094
 8005028:	20000095 	.word	0x20000095

0800502c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	32b0      	adds	r2, #176	@ 0xb0
 8005040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005044:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005058:	2303      	movs	r3, #3
 800505a:	e0bf      	b.n	80051dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005064:	2b00      	cmp	r3, #0
 8005066:	d050      	beq.n	800510a <USBD_CDC_Setup+0xde>
 8005068:	2b20      	cmp	r3, #32
 800506a:	f040 80af 	bne.w	80051cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	88db      	ldrh	r3, [r3, #6]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d03a      	beq.n	80050ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b25b      	sxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	da1b      	bge.n	80050b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	33b0      	adds	r3, #176	@ 0xb0
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005096:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	88d2      	ldrh	r2, [r2, #6]
 800509c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	88db      	ldrh	r3, [r3, #6]
 80050a2:	2b07      	cmp	r3, #7
 80050a4:	bf28      	it	cs
 80050a6:	2307      	movcs	r3, #7
 80050a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	89fa      	ldrh	r2, [r7, #14]
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 fda7 	bl	8006c04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80050b6:	e090      	b.n	80051da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	785a      	ldrb	r2, [r3, #1]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	88db      	ldrh	r3, [r3, #6]
 80050c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80050c8:	d803      	bhi.n	80050d2 <USBD_CDC_Setup+0xa6>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	88db      	ldrh	r3, [r3, #6]
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	e000      	b.n	80050d4 <USBD_CDC_Setup+0xa8>
 80050d2:	2240      	movs	r2, #64	@ 0x40
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80050da:	6939      	ldr	r1, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80050e2:	461a      	mov	r2, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f001 fdbc 	bl	8006c62 <USBD_CtlPrepareRx>
      break;
 80050ea:	e076      	b.n	80051da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	33b0      	adds	r3, #176	@ 0xb0
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	7850      	ldrb	r0, [r2, #1]
 8005102:	2200      	movs	r2, #0
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	4798      	blx	r3
      break;
 8005108:	e067      	b.n	80051da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	2b0b      	cmp	r3, #11
 8005110:	d851      	bhi.n	80051b6 <USBD_CDC_Setup+0x18a>
 8005112:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <USBD_CDC_Setup+0xec>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	08005149 	.word	0x08005149
 800511c:	080051c5 	.word	0x080051c5
 8005120:	080051b7 	.word	0x080051b7
 8005124:	080051b7 	.word	0x080051b7
 8005128:	080051b7 	.word	0x080051b7
 800512c:	080051b7 	.word	0x080051b7
 8005130:	080051b7 	.word	0x080051b7
 8005134:	080051b7 	.word	0x080051b7
 8005138:	080051b7 	.word	0x080051b7
 800513c:	080051b7 	.word	0x080051b7
 8005140:	08005173 	.word	0x08005173
 8005144:	0800519d 	.word	0x0800519d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b03      	cmp	r3, #3
 8005152:	d107      	bne.n	8005164 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005154:	f107 030a 	add.w	r3, r7, #10
 8005158:	2202      	movs	r2, #2
 800515a:	4619      	mov	r1, r3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f001 fd51 	bl	8006c04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005162:	e032      	b.n	80051ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f001 fccf 	bl	8006b0a <USBD_CtlError>
            ret = USBD_FAIL;
 800516c:	2303      	movs	r3, #3
 800516e:	75fb      	strb	r3, [r7, #23]
          break;
 8005170:	e02b      	b.n	80051ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b03      	cmp	r3, #3
 800517c:	d107      	bne.n	800518e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800517e:	f107 030d 	add.w	r3, r7, #13
 8005182:	2201      	movs	r2, #1
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 fd3c 	bl	8006c04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800518c:	e01d      	b.n	80051ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800518e:	6839      	ldr	r1, [r7, #0]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 fcba 	bl	8006b0a <USBD_CtlError>
            ret = USBD_FAIL;
 8005196:	2303      	movs	r3, #3
 8005198:	75fb      	strb	r3, [r7, #23]
          break;
 800519a:	e016      	b.n	80051ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d00f      	beq.n	80051c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 fcad 	bl	8006b0a <USBD_CtlError>
            ret = USBD_FAIL;
 80051b0:	2303      	movs	r3, #3
 80051b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051b4:	e008      	b.n	80051c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f001 fca6 	bl	8006b0a <USBD_CtlError>
          ret = USBD_FAIL;
 80051be:	2303      	movs	r3, #3
 80051c0:	75fb      	strb	r3, [r7, #23]
          break;
 80051c2:	e002      	b.n	80051ca <USBD_CDC_Setup+0x19e>
          break;
 80051c4:	bf00      	nop
 80051c6:	e008      	b.n	80051da <USBD_CDC_Setup+0x1ae>
          break;
 80051c8:	bf00      	nop
      }
      break;
 80051ca:	e006      	b.n	80051da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80051cc:	6839      	ldr	r1, [r7, #0]
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f001 fc9b 	bl	8006b0a <USBD_CtlError>
      ret = USBD_FAIL;
 80051d4:	2303      	movs	r3, #3
 80051d6:	75fb      	strb	r3, [r7, #23]
      break;
 80051d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80051f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	32b0      	adds	r2, #176	@ 0xb0
 8005202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800520a:	2303      	movs	r3, #3
 800520c:	e065      	b.n	80052da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	32b0      	adds	r2, #176	@ 0xb0
 8005218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3314      	adds	r3, #20
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02f      	beq.n	8005298 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	f003 020f 	and.w	r2, r3, #15
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	3314      	adds	r3, #20
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	f003 010f 	and.w	r1, r3, #15
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	460b      	mov	r3, r1
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	440b      	add	r3, r1
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4403      	add	r3, r0
 8005260:	331c      	adds	r3, #28
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	fbb2 f1f3 	udiv	r1, r2, r3
 8005268:	fb01 f303 	mul.w	r3, r1, r3
 800526c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800526e:	2b00      	cmp	r3, #0
 8005270:	d112      	bne.n	8005298 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 020f 	and.w	r2, r3, #15
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	3314      	adds	r3, #20
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800528a:	78f9      	ldrb	r1, [r7, #3]
 800528c:	2300      	movs	r3, #0
 800528e:	2200      	movs	r2, #0
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f002 f9b6 	bl	8007602 <USBD_LL_Transmit>
 8005296:	e01f      	b.n	80052d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	33b0      	adds	r3, #176	@ 0xb0
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d010      	beq.n	80052d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	33b0      	adds	r3, #176	@ 0xb0
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80052d4:	78fa      	ldrb	r2, [r7, #3]
 80052d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	32b0      	adds	r2, #176	@ 0xb0
 80052f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	32b0      	adds	r2, #176	@ 0xb0
 8005308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005310:	2303      	movs	r3, #3
 8005312:	e01a      	b.n	800534a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f002 f9b4 	bl	8007686 <USBD_LL_GetRxDataSize>
 800531e:	4602      	mov	r2, r0
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	33b0      	adds	r3, #176	@ 0xb0
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005344:	4611      	mov	r1, r2
 8005346:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	32b0      	adds	r2, #176	@ 0xb0
 8005364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005368:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005370:	2303      	movs	r3, #3
 8005372:	e024      	b.n	80053be <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	33b0      	adds	r3, #176	@ 0xb0
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d019      	beq.n	80053bc <USBD_CDC_EP0_RxReady+0x6a>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800538e:	2bff      	cmp	r3, #255	@ 0xff
 8005390:	d014      	beq.n	80053bc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	33b0      	adds	r3, #176	@ 0xb0
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80053aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80053b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	22ff      	movs	r2, #255	@ 0xff
 80053b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80053d0:	2182      	movs	r1, #130	@ 0x82
 80053d2:	4818      	ldr	r0, [pc, #96]	@ (8005434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053d4:	f000 fd62 	bl	8005e9c <USBD_GetEpDesc>
 80053d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053da:	2101      	movs	r1, #1
 80053dc:	4815      	ldr	r0, [pc, #84]	@ (8005434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053de:	f000 fd5d 	bl	8005e9c <USBD_GetEpDesc>
 80053e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053e4:	2181      	movs	r1, #129	@ 0x81
 80053e6:	4813      	ldr	r0, [pc, #76]	@ (8005434 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053e8:	f000 fd58 	bl	8005e9c <USBD_GetEpDesc>
 80053ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2210      	movs	r2, #16
 80053f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d006      	beq.n	800540e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2200      	movs	r2, #0
 8005404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005408:	711a      	strb	r2, [r3, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d006      	beq.n	8005422 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800541c:	711a      	strb	r2, [r3, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2243      	movs	r2, #67	@ 0x43
 8005426:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005428:	4b02      	ldr	r3, [pc, #8]	@ (8005434 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000050 	.word	0x20000050

08005438 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005440:	2182      	movs	r1, #130	@ 0x82
 8005442:	4818      	ldr	r0, [pc, #96]	@ (80054a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005444:	f000 fd2a 	bl	8005e9c <USBD_GetEpDesc>
 8005448:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800544a:	2101      	movs	r1, #1
 800544c:	4815      	ldr	r0, [pc, #84]	@ (80054a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800544e:	f000 fd25 	bl	8005e9c <USBD_GetEpDesc>
 8005452:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005454:	2181      	movs	r1, #129	@ 0x81
 8005456:	4813      	ldr	r0, [pc, #76]	@ (80054a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005458:	f000 fd20 	bl	8005e9c <USBD_GetEpDesc>
 800545c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2210      	movs	r2, #16
 8005468:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2200      	movs	r2, #0
 8005474:	711a      	strb	r2, [r3, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f042 0202 	orr.w	r2, r2, #2
 800547c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d006      	beq.n	8005492 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	711a      	strb	r2, [r3, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f042 0202 	orr.w	r2, r2, #2
 8005490:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2243      	movs	r2, #67	@ 0x43
 8005496:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005498:	4b02      	ldr	r3, [pc, #8]	@ (80054a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000050 	.word	0x20000050

080054a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054b0:	2182      	movs	r1, #130	@ 0x82
 80054b2:	4818      	ldr	r0, [pc, #96]	@ (8005514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054b4:	f000 fcf2 	bl	8005e9c <USBD_GetEpDesc>
 80054b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054ba:	2101      	movs	r1, #1
 80054bc:	4815      	ldr	r0, [pc, #84]	@ (8005514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054be:	f000 fced 	bl	8005e9c <USBD_GetEpDesc>
 80054c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054c4:	2181      	movs	r1, #129	@ 0x81
 80054c6:	4813      	ldr	r0, [pc, #76]	@ (8005514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80054c8:	f000 fce8 	bl	8005e9c <USBD_GetEpDesc>
 80054cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2210      	movs	r2, #16
 80054d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d006      	beq.n	80054ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054e8:	711a      	strb	r2, [r3, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d006      	beq.n	8005502 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054fc:	711a      	strb	r2, [r3, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2243      	movs	r2, #67	@ 0x43
 8005506:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005508:	4b02      	ldr	r3, [pc, #8]	@ (8005514 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000050 	.word	0x20000050

08005518 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	220a      	movs	r2, #10
 8005524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005526:	4b03      	ldr	r3, [pc, #12]	@ (8005534 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	2000000c 	.word	0x2000000c

08005538 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005548:	2303      	movs	r3, #3
 800554a:	e009      	b.n	8005560 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	33b0      	adds	r3, #176	@ 0xb0
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	32b0      	adds	r2, #176	@ 0xb0
 8005582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005586:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800558e:	2303      	movs	r3, #3
 8005590:	e008      	b.n	80055a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	32b0      	adds	r2, #176	@ 0xb0
 80055c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e004      	b.n	80055de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	32b0      	adds	r2, #176	@ 0xb0
 80055fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005602:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800560e:	2303      	movs	r3, #3
 8005610:	e025      	b.n	800565e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11f      	bne.n	800565c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2201      	movs	r2, #1
 8005620:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005624:	4b10      	ldr	r3, [pc, #64]	@ (8005668 <USBD_CDC_TransmitPacket+0x7c>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f003 020f 	and.w	r2, r3, #15
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4403      	add	r3, r0
 800563e:	3314      	adds	r3, #20
 8005640:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005642:	4b09      	ldr	r3, [pc, #36]	@ (8005668 <USBD_CDC_TransmitPacket+0x7c>)
 8005644:	7819      	ldrb	r1, [r3, #0]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f001 ffd5 	bl	8007602 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000093 	.word	0x20000093

0800566c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	32b0      	adds	r2, #176	@ 0xb0
 800567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005682:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	32b0      	adds	r2, #176	@ 0xb0
 800568e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005696:	2303      	movs	r3, #3
 8005698:	e018      	b.n	80056cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	7c1b      	ldrb	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056a2:	4b0c      	ldr	r3, [pc, #48]	@ (80056d4 <USBD_CDC_ReceivePacket+0x68>)
 80056a4:	7819      	ldrb	r1, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80056ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f001 ffc7 	bl	8007644 <USBD_LL_PrepareReceive>
 80056b6:	e008      	b.n	80056ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <USBD_CDC_ReceivePacket+0x68>)
 80056ba:	7819      	ldrb	r1, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80056c2:	2340      	movs	r3, #64	@ 0x40
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 ffbd 	bl	8007644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000094 	.word	0x20000094

080056d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e01f      	b.n	8005730 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	79fa      	ldrb	r2, [r7, #7]
 8005722:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f001 fe37 	bl	8007398 <USBD_LL_Init>
 800572a:	4603      	mov	r3, r0
 800572c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800572e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800574c:	2303      	movs	r3, #3
 800574e:	e025      	b.n	800579c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	32ae      	adds	r2, #174	@ 0xae
 8005762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00f      	beq.n	800578c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	32ae      	adds	r2, #174	@ 0xae
 8005776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	f107 020e 	add.w	r2, r7, #14
 8005780:	4610      	mov	r0, r2
 8005782:	4798      	blx	r3
 8005784:	4602      	mov	r2, r0
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 fe3f 	bl	8007430 <USBD_LL_Start>
 80057b2:	4603      	mov	r3, r0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d009      	beq.n	8005800 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	4611      	mov	r1, r2
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	4798      	blx	r3
 80057fc:	4603      	mov	r3, r0
 80057fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	78fa      	ldrb	r2, [r7, #3]
 8005824:	4611      	mov	r1, r2
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	4798      	blx	r3
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005830:	2303      	movs	r3, #3
 8005832:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f001 f920 	bl	8006a96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005864:	461a      	mov	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005872:	f003 031f 	and.w	r3, r3, #31
 8005876:	2b02      	cmp	r3, #2
 8005878:	d01a      	beq.n	80058b0 <USBD_LL_SetupStage+0x72>
 800587a:	2b02      	cmp	r3, #2
 800587c:	d822      	bhi.n	80058c4 <USBD_LL_SetupStage+0x86>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <USBD_LL_SetupStage+0x4a>
 8005882:	2b01      	cmp	r3, #1
 8005884:	d00a      	beq.n	800589c <USBD_LL_SetupStage+0x5e>
 8005886:	e01d      	b.n	80058c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fb75 	bl	8005f80 <USBD_StdDevReq>
 8005896:	4603      	mov	r3, r0
 8005898:	73fb      	strb	r3, [r7, #15]
      break;
 800589a:	e020      	b.n	80058de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fbdd 	bl	8006064 <USBD_StdItfReq>
 80058aa:	4603      	mov	r3, r0
 80058ac:	73fb      	strb	r3, [r7, #15]
      break;
 80058ae:	e016      	b.n	80058de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fc3f 	bl	800613c <USBD_StdEPReq>
 80058be:	4603      	mov	r3, r0
 80058c0:	73fb      	strb	r3, [r7, #15]
      break;
 80058c2:	e00c      	b.n	80058de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80058ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 fe0c 	bl	80074f0 <USBD_LL_StallEP>
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	bf00      	nop
  }

  return ret;
 80058de:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	460b      	mov	r3, r1
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80058fa:	7afb      	ldrb	r3, [r7, #11]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d177      	bne.n	80059f0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005906:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800590e:	2b03      	cmp	r3, #3
 8005910:	f040 80a1 	bne.w	8005a56 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	8992      	ldrh	r2, [r2, #12]
 800591c:	4293      	cmp	r3, r2
 800591e:	d91c      	bls.n	800595a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	8992      	ldrh	r2, [r2, #12]
 8005928:	1a9a      	subs	r2, r3, r2
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	8992      	ldrh	r2, [r2, #12]
 8005936:	441a      	add	r2, r3
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	6919      	ldr	r1, [r3, #16]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	899b      	ldrh	r3, [r3, #12]
 8005944:	461a      	mov	r2, r3
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4293      	cmp	r3, r2
 800594c:	bf38      	it	cc
 800594e:	4613      	movcc	r3, r2
 8005950:	461a      	mov	r2, r3
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f001 f9a6 	bl	8006ca4 <USBD_CtlContinueRx>
 8005958:	e07d      	b.n	8005a56 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	2b02      	cmp	r3, #2
 8005966:	d014      	beq.n	8005992 <USBD_LL_DataOutStage+0xaa>
 8005968:	2b02      	cmp	r3, #2
 800596a:	d81d      	bhi.n	80059a8 <USBD_LL_DataOutStage+0xc0>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <USBD_LL_DataOutStage+0x8e>
 8005970:	2b01      	cmp	r3, #1
 8005972:	d003      	beq.n	800597c <USBD_LL_DataOutStage+0x94>
 8005974:	e018      	b.n	80059a8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	75bb      	strb	r3, [r7, #22]
            break;
 800597a:	e018      	b.n	80059ae <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005982:	b2db      	uxtb	r3, r3
 8005984:	4619      	mov	r1, r3
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa6e 	bl	8005e68 <USBD_CoreFindIF>
 800598c:	4603      	mov	r3, r0
 800598e:	75bb      	strb	r3, [r7, #22]
            break;
 8005990:	e00d      	b.n	80059ae <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005998:	b2db      	uxtb	r3, r3
 800599a:	4619      	mov	r1, r3
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fa70 	bl	8005e82 <USBD_CoreFindEP>
 80059a2:	4603      	mov	r3, r0
 80059a4:	75bb      	strb	r3, [r7, #22]
            break;
 80059a6:	e002      	b.n	80059ae <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	75bb      	strb	r3, [r7, #22]
            break;
 80059ac:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80059ae:	7dbb      	ldrb	r3, [r7, #22]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d119      	bne.n	80059e8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d113      	bne.n	80059e8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80059c0:	7dba      	ldrb	r2, [r7, #22]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	32ae      	adds	r2, #174	@ 0xae
 80059c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80059d0:	7dba      	ldrb	r2, [r7, #22]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80059d8:	7dba      	ldrb	r2, [r7, #22]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	32ae      	adds	r2, #174	@ 0xae
 80059de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f001 f96c 	bl	8006cc6 <USBD_CtlSendStatus>
 80059ee:	e032      	b.n	8005a56 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80059f0:	7afb      	ldrb	r3, [r7, #11]
 80059f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	4619      	mov	r1, r3
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fa41 	bl	8005e82 <USBD_CoreFindEP>
 8005a00:	4603      	mov	r3, r0
 8005a02:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a04:	7dbb      	ldrb	r3, [r7, #22]
 8005a06:	2bff      	cmp	r3, #255	@ 0xff
 8005a08:	d025      	beq.n	8005a56 <USBD_LL_DataOutStage+0x16e>
 8005a0a:	7dbb      	ldrb	r3, [r7, #22]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d122      	bne.n	8005a56 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d117      	bne.n	8005a4c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005a1c:	7dba      	ldrb	r2, [r7, #22]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	32ae      	adds	r2, #174	@ 0xae
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00f      	beq.n	8005a4c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005a2c:	7dba      	ldrb	r2, [r7, #22]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a34:	7dba      	ldrb	r2, [r7, #22]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	32ae      	adds	r2, #174	@ 0xae
 8005a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	7afa      	ldrb	r2, [r7, #11]
 8005a42:	4611      	mov	r1, r2
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	4798      	blx	r3
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	e000      	b.n	8005a58 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005a6e:	7afb      	ldrb	r3, [r7, #11]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d178      	bne.n	8005b66 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3314      	adds	r3, #20
 8005a78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d163      	bne.n	8005b4c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	8992      	ldrh	r2, [r2, #12]
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d91c      	bls.n	8005aca <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	8992      	ldrh	r2, [r2, #12]
 8005a98:	1a9a      	subs	r2, r3, r2
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	8992      	ldrh	r2, [r2, #12]
 8005aa6:	441a      	add	r2, r3
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6919      	ldr	r1, [r3, #16]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f001 f8c2 	bl	8006c40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005abc:	2300      	movs	r3, #0
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f001 fdbe 	bl	8007644 <USBD_LL_PrepareReceive>
 8005ac8:	e040      	b.n	8005b4c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	899b      	ldrh	r3, [r3, #12]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d11c      	bne.n	8005b12 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d316      	bcc.n	8005b12 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d20f      	bcs.n	8005b12 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005af2:	2200      	movs	r2, #0
 8005af4:	2100      	movs	r1, #0
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f001 f8a2 	bl	8006c40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b04:	2300      	movs	r3, #0
 8005b06:	2200      	movs	r2, #0
 8005b08:	2100      	movs	r1, #0
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f001 fd9a 	bl	8007644 <USBD_LL_PrepareReceive>
 8005b10:	e01c      	b.n	8005b4c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d10f      	bne.n	8005b3e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b3e:	2180      	movs	r1, #128	@ 0x80
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f001 fcd5 	bl	80074f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f001 f8d0 	bl	8006cec <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d03a      	beq.n	8005bcc <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fe30 	bl	80057bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005b64:	e032      	b.n	8005bcc <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b66:	7afb      	ldrb	r3, [r7, #11]
 8005b68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	4619      	mov	r1, r3
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 f986 	bl	8005e82 <USBD_CoreFindEP>
 8005b76:	4603      	mov	r3, r0
 8005b78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2bff      	cmp	r3, #255	@ 0xff
 8005b7e:	d025      	beq.n	8005bcc <USBD_LL_DataInStage+0x16c>
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d122      	bne.n	8005bcc <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d11c      	bne.n	8005bcc <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005b92:	7dfa      	ldrb	r2, [r7, #23]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	32ae      	adds	r2, #174	@ 0xae
 8005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d014      	beq.n	8005bcc <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8005ba2:	7dfa      	ldrb	r2, [r7, #23]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005baa:	7dfa      	ldrb	r2, [r7, #23]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	32ae      	adds	r2, #174	@ 0xae
 8005bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	7afa      	ldrb	r2, [r7, #11]
 8005bb8:	4611      	mov	r1, r2
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	4798      	blx	r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005bc2:	7dbb      	ldrb	r3, [r7, #22]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005bc8:	7dbb      	ldrb	r3, [r7, #22]
 8005bca:	e000      	b.n	8005bce <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d014      	beq.n	8005c3c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6852      	ldr	r2, [r2, #4]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c3c:	2340      	movs	r3, #64	@ 0x40
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2100      	movs	r1, #0
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 fc0f 	bl	8007466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2240      	movs	r2, #64	@ 0x40
 8005c54:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c58:	2340      	movs	r3, #64	@ 0x40
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2180      	movs	r1, #128	@ 0x80
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 fc01 	bl	8007466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2240      	movs	r2, #64	@ 0x40
 8005c70:	841a      	strh	r2, [r3, #32]

  return ret;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d006      	beq.n	8005cbe <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d106      	bne.n	8005cf6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d110      	bne.n	8005d3a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00b      	beq.n	8005d3a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	32ae      	adds	r2, #174	@ 0xae
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e01c      	b.n	8005da0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d115      	bne.n	8005d9e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	32ae      	adds	r2, #174	@ 0xae
 8005d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	32ae      	adds	r2, #174	@ 0xae
 8005d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	78fa      	ldrb	r2, [r7, #3]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	32ae      	adds	r2, #174	@ 0xae
 8005dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e01c      	b.n	8005e04 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d115      	bne.n	8005e02 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	32ae      	adds	r2, #174	@ 0xae
 8005de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	32ae      	adds	r2, #174	@ 0xae
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	78fa      	ldrb	r2, [r7, #3]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00e      	beq.n	8005e5e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6852      	ldr	r2, [r2, #4]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	4611      	mov	r1, r2
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e8e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	885b      	ldrh	r3, [r3, #2]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	7812      	ldrb	r2, [r2, #0]
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d91f      	bls.n	8005f02 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ec8:	e013      	b.n	8005ef2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005eca:	f107 030a 	add.w	r3, r7, #10
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6978      	ldr	r0, [r7, #20]
 8005ed2:	f000 f81b 	bl	8005f0c <USBD_GetNextDesc>
 8005ed6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	d108      	bne.n	8005ef2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	789b      	ldrb	r3, [r3, #2]
 8005ee8:	78fa      	ldrb	r2, [r7, #3]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d008      	beq.n	8005f00 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	885b      	ldrh	r3, [r3, #2]
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	897b      	ldrh	r3, [r7, #10]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d8e5      	bhi.n	8005eca <USBD_GetEpDesc+0x2e>
 8005efe:	e000      	b.n	8005f02 <USBD_GetEpDesc+0x66>
          break;
 8005f00:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f02:	693b      	ldr	r3, [r7, #16]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	4413      	add	r3, r2
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4413      	add	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005f36:	68fb      	ldr	r3, [r7, #12]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f62:	8a3b      	ldrh	r3, [r7, #16]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	b21a      	sxth	r2, r3
 8005f68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b21b      	sxth	r3, r3
 8005f70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f72:	89fb      	ldrh	r3, [r7, #14]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f96:	2b40      	cmp	r3, #64	@ 0x40
 8005f98:	d005      	beq.n	8005fa6 <USBD_StdDevReq+0x26>
 8005f9a:	2b40      	cmp	r3, #64	@ 0x40
 8005f9c:	d857      	bhi.n	800604e <USBD_StdDevReq+0xce>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00f      	beq.n	8005fc2 <USBD_StdDevReq+0x42>
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d153      	bne.n	800604e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	32ae      	adds	r2, #174	@ 0xae
 8005fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	4798      	blx	r3
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc0:	e04a      	b.n	8006058 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	2b09      	cmp	r3, #9
 8005fc8:	d83b      	bhi.n	8006042 <USBD_StdDevReq+0xc2>
 8005fca:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd0 <USBD_StdDevReq+0x50>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08006025 	.word	0x08006025
 8005fd4:	08006039 	.word	0x08006039
 8005fd8:	08006043 	.word	0x08006043
 8005fdc:	0800602f 	.word	0x0800602f
 8005fe0:	08006043 	.word	0x08006043
 8005fe4:	08006003 	.word	0x08006003
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	08006043 	.word	0x08006043
 8005ff0:	0800601b 	.word	0x0800601b
 8005ff4:	0800600d 	.word	0x0800600d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa3e 	bl	800647c <USBD_GetDescriptor>
          break;
 8006000:	e024      	b.n	800604c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fba3 	bl	8006750 <USBD_SetAddress>
          break;
 800600a:	e01f      	b.n	800604c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fbe2 	bl	80067d8 <USBD_SetConfig>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
          break;
 8006018:	e018      	b.n	800604c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fc85 	bl	800692c <USBD_GetConfig>
          break;
 8006022:	e013      	b.n	800604c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fcb6 	bl	8006998 <USBD_GetStatus>
          break;
 800602c:	e00e      	b.n	800604c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fce5 	bl	8006a00 <USBD_SetFeature>
          break;
 8006036:	e009      	b.n	800604c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fd09 	bl	8006a52 <USBD_ClrFeature>
          break;
 8006040:	e004      	b.n	800604c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fd60 	bl	8006b0a <USBD_CtlError>
          break;
 800604a:	bf00      	nop
      }
      break;
 800604c:	e004      	b.n	8006058 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fd5a 	bl	8006b0a <USBD_CtlError>
      break;
 8006056:	bf00      	nop
  }

  return ret;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop

08006064 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800607a:	2b40      	cmp	r3, #64	@ 0x40
 800607c:	d005      	beq.n	800608a <USBD_StdItfReq+0x26>
 800607e:	2b40      	cmp	r3, #64	@ 0x40
 8006080:	d852      	bhi.n	8006128 <USBD_StdItfReq+0xc4>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <USBD_StdItfReq+0x26>
 8006086:	2b20      	cmp	r3, #32
 8006088:	d14e      	bne.n	8006128 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006090:	b2db      	uxtb	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	2b02      	cmp	r3, #2
 8006096:	d840      	bhi.n	800611a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	889b      	ldrh	r3, [r3, #4]
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d836      	bhi.n	8006110 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	889b      	ldrh	r3, [r3, #4]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fedc 	bl	8005e68 <USBD_CoreFindIF>
 80060b0:	4603      	mov	r3, r0
 80060b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	2bff      	cmp	r3, #255	@ 0xff
 80060b8:	d01d      	beq.n	80060f6 <USBD_StdItfReq+0x92>
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11a      	bne.n	80060f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80060c0:	7bba      	ldrb	r2, [r7, #14]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	32ae      	adds	r2, #174	@ 0xae
 80060c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00f      	beq.n	80060f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80060d0:	7bba      	ldrb	r2, [r7, #14]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060d8:	7bba      	ldrb	r2, [r7, #14]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	32ae      	adds	r2, #174	@ 0xae
 80060de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80060ee:	e004      	b.n	80060fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80060f0:	2303      	movs	r3, #3
 80060f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80060f4:	e001      	b.n	80060fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80060f6:	2303      	movs	r3, #3
 80060f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	88db      	ldrh	r3, [r3, #6]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d110      	bne.n	8006124 <USBD_StdItfReq+0xc0>
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10d      	bne.n	8006124 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fddc 	bl	8006cc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800610e:	e009      	b.n	8006124 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fcf9 	bl	8006b0a <USBD_CtlError>
          break;
 8006118:	e004      	b.n	8006124 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fcf4 	bl	8006b0a <USBD_CtlError>
          break;
 8006122:	e000      	b.n	8006126 <USBD_StdItfReq+0xc2>
          break;
 8006124:	bf00      	nop
      }
      break;
 8006126:	e004      	b.n	8006132 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fced 	bl	8006b0a <USBD_CtlError>
      break;
 8006130:	bf00      	nop
  }

  return ret;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	889b      	ldrh	r3, [r3, #4]
 800614e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006158:	2b40      	cmp	r3, #64	@ 0x40
 800615a:	d007      	beq.n	800616c <USBD_StdEPReq+0x30>
 800615c:	2b40      	cmp	r3, #64	@ 0x40
 800615e:	f200 8181 	bhi.w	8006464 <USBD_StdEPReq+0x328>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d02a      	beq.n	80061bc <USBD_StdEPReq+0x80>
 8006166:	2b20      	cmp	r3, #32
 8006168:	f040 817c 	bne.w	8006464 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff fe86 	bl	8005e82 <USBD_CoreFindEP>
 8006176:	4603      	mov	r3, r0
 8006178:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800617a:	7b7b      	ldrb	r3, [r7, #13]
 800617c:	2bff      	cmp	r3, #255	@ 0xff
 800617e:	f000 8176 	beq.w	800646e <USBD_StdEPReq+0x332>
 8006182:	7b7b      	ldrb	r3, [r7, #13]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f040 8172 	bne.w	800646e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800618a:	7b7a      	ldrb	r2, [r7, #13]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006192:	7b7a      	ldrb	r2, [r7, #13]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	32ae      	adds	r2, #174	@ 0xae
 8006198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8165 	beq.w	800646e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80061a4:	7b7a      	ldrb	r2, [r7, #13]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	32ae      	adds	r2, #174	@ 0xae
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80061ba:	e158      	b.n	800646e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d008      	beq.n	80061d6 <USBD_StdEPReq+0x9a>
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	f300 8147 	bgt.w	8006458 <USBD_StdEPReq+0x31c>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 809b 	beq.w	8006306 <USBD_StdEPReq+0x1ca>
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d03c      	beq.n	800624e <USBD_StdEPReq+0x112>
 80061d4:	e140      	b.n	8006458 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d002      	beq.n	80061e8 <USBD_StdEPReq+0xac>
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d016      	beq.n	8006214 <USBD_StdEPReq+0xd8>
 80061e6:	e02c      	b.n	8006242 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061e8:	7bbb      	ldrb	r3, [r7, #14]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <USBD_StdEPReq+0xce>
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	2b80      	cmp	r3, #128	@ 0x80
 80061f2:	d00a      	beq.n	800620a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061f4:	7bbb      	ldrb	r3, [r7, #14]
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 f979 	bl	80074f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061fe:	2180      	movs	r1, #128	@ 0x80
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 f975 	bl	80074f0 <USBD_LL_StallEP>
 8006206:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006208:	e020      	b.n	800624c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fc7c 	bl	8006b0a <USBD_CtlError>
              break;
 8006212:	e01b      	b.n	800624c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	885b      	ldrh	r3, [r3, #2]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10e      	bne.n	800623a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <USBD_StdEPReq+0xfe>
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	2b80      	cmp	r3, #128	@ 0x80
 8006226:	d008      	beq.n	800623a <USBD_StdEPReq+0xfe>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	88db      	ldrh	r3, [r3, #6]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006230:	7bbb      	ldrb	r3, [r7, #14]
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 f95b 	bl	80074f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fd43 	bl	8006cc6 <USBD_CtlSendStatus>

              break;
 8006240:	e004      	b.n	800624c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fc60 	bl	8006b0a <USBD_CtlError>
              break;
 800624a:	bf00      	nop
          }
          break;
 800624c:	e109      	b.n	8006462 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d002      	beq.n	8006260 <USBD_StdEPReq+0x124>
 800625a:	2b03      	cmp	r3, #3
 800625c:	d016      	beq.n	800628c <USBD_StdEPReq+0x150>
 800625e:	e04b      	b.n	80062f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00d      	beq.n	8006282 <USBD_StdEPReq+0x146>
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	2b80      	cmp	r3, #128	@ 0x80
 800626a:	d00a      	beq.n	8006282 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f001 f93d 	bl	80074f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006276:	2180      	movs	r1, #128	@ 0x80
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 f939 	bl	80074f0 <USBD_LL_StallEP>
 800627e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006280:	e040      	b.n	8006304 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fc40 	bl	8006b0a <USBD_CtlError>
              break;
 800628a:	e03b      	b.n	8006304 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	885b      	ldrh	r3, [r3, #2]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d136      	bne.n	8006302 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 f943 	bl	800752e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fd0c 	bl	8006cc6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fde5 	bl	8005e82 <USBD_CoreFindEP>
 80062b8:	4603      	mov	r3, r0
 80062ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062bc:	7b7b      	ldrb	r3, [r7, #13]
 80062be:	2bff      	cmp	r3, #255	@ 0xff
 80062c0:	d01f      	beq.n	8006302 <USBD_StdEPReq+0x1c6>
 80062c2:	7b7b      	ldrb	r3, [r7, #13]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d11c      	bne.n	8006302 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80062c8:	7b7a      	ldrb	r2, [r7, #13]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80062d0:	7b7a      	ldrb	r2, [r7, #13]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	32ae      	adds	r2, #174	@ 0xae
 80062d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d010      	beq.n	8006302 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80062e0:	7b7a      	ldrb	r2, [r7, #13]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	32ae      	adds	r2, #174	@ 0xae
 80062e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
 80062f2:	4603      	mov	r3, r0
 80062f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80062f6:	e004      	b.n	8006302 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fc05 	bl	8006b0a <USBD_CtlError>
              break;
 8006300:	e000      	b.n	8006304 <USBD_StdEPReq+0x1c8>
              break;
 8006302:	bf00      	nop
          }
          break;
 8006304:	e0ad      	b.n	8006462 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d002      	beq.n	8006318 <USBD_StdEPReq+0x1dc>
 8006312:	2b03      	cmp	r3, #3
 8006314:	d033      	beq.n	800637e <USBD_StdEPReq+0x242>
 8006316:	e099      	b.n	800644c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <USBD_StdEPReq+0x1f2>
 800631e:	7bbb      	ldrb	r3, [r7, #14]
 8006320:	2b80      	cmp	r3, #128	@ 0x80
 8006322:	d004      	beq.n	800632e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fbef 	bl	8006b0a <USBD_CtlError>
                break;
 800632c:	e093      	b.n	8006456 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800632e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006332:	2b00      	cmp	r3, #0
 8006334:	da0b      	bge.n	800634e <USBD_StdEPReq+0x212>
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	3310      	adds	r3, #16
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4413      	add	r3, r2
 800634a:	3304      	adds	r3, #4
 800634c:	e00b      	b.n	8006366 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4413      	add	r3, r2
 8006364:	3304      	adds	r3, #4
 8006366:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	330e      	adds	r3, #14
 8006372:	2202      	movs	r2, #2
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 fc44 	bl	8006c04 <USBD_CtlSendData>
              break;
 800637c:	e06b      	b.n	8006456 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800637e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006382:	2b00      	cmp	r3, #0
 8006384:	da11      	bge.n	80063aa <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	f003 020f 	and.w	r2, r3, #15
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	3323      	adds	r3, #35	@ 0x23
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d117      	bne.n	80063d0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fbb1 	bl	8006b0a <USBD_CtlError>
                  break;
 80063a8:	e055      	b.n	8006456 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	f003 020f 	and.w	r2, r3, #15
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	4613      	mov	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	440b      	add	r3, r1
 80063bc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fb9e 	bl	8006b0a <USBD_CtlError>
                  break;
 80063ce:	e042      	b.n	8006456 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	da0b      	bge.n	80063f0 <USBD_StdEPReq+0x2b4>
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	3310      	adds	r3, #16
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4413      	add	r3, r2
 80063ec:	3304      	adds	r3, #4
 80063ee:	e00b      	b.n	8006408 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4413      	add	r3, r2
 8006406:	3304      	adds	r3, #4
 8006408:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <USBD_StdEPReq+0x2da>
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	2b80      	cmp	r3, #128	@ 0x80
 8006414:	d103      	bne.n	800641e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2200      	movs	r2, #0
 800641a:	739a      	strb	r2, [r3, #14]
 800641c:	e00e      	b.n	800643c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f8a2 	bl	800756c <USBD_LL_IsStallEP>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2201      	movs	r2, #1
 8006432:	739a      	strb	r2, [r3, #14]
 8006434:	e002      	b.n	800643c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2200      	movs	r2, #0
 800643a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	330e      	adds	r3, #14
 8006440:	2202      	movs	r2, #2
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fbdd 	bl	8006c04 <USBD_CtlSendData>
              break;
 800644a:	e004      	b.n	8006456 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fb5b 	bl	8006b0a <USBD_CtlError>
              break;
 8006454:	bf00      	nop
          }
          break;
 8006456:	e004      	b.n	8006462 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fb55 	bl	8006b0a <USBD_CtlError>
          break;
 8006460:	bf00      	nop
      }
      break;
 8006462:	e005      	b.n	8006470 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb4f 	bl	8006b0a <USBD_CtlError>
      break;
 800646c:	e000      	b.n	8006470 <USBD_StdEPReq+0x334>
      break;
 800646e:	bf00      	nop
  }

  return ret;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	885b      	ldrh	r3, [r3, #2]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	2b06      	cmp	r3, #6
 800649e:	f200 8128 	bhi.w	80066f2 <USBD_GetDescriptor+0x276>
 80064a2:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <USBD_GetDescriptor+0x2c>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064c5 	.word	0x080064c5
 80064ac:	080064dd 	.word	0x080064dd
 80064b0:	0800651d 	.word	0x0800651d
 80064b4:	080066f3 	.word	0x080066f3
 80064b8:	080066f3 	.word	0x080066f3
 80064bc:	08006693 	.word	0x08006693
 80064c0:	080066bf 	.word	0x080066bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	7c12      	ldrb	r2, [r2, #16]
 80064d0:	f107 0108 	add.w	r1, r7, #8
 80064d4:	4610      	mov	r0, r2
 80064d6:	4798      	blx	r3
 80064d8:	60f8      	str	r0, [r7, #12]
      break;
 80064da:	e112      	b.n	8006702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	7c1b      	ldrb	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10d      	bne.n	8006500 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ec:	f107 0208 	add.w	r2, r7, #8
 80064f0:	4610      	mov	r0, r2
 80064f2:	4798      	blx	r3
 80064f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	2202      	movs	r2, #2
 80064fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80064fe:	e100      	b.n	8006702 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	f107 0208 	add.w	r2, r7, #8
 800650c:	4610      	mov	r0, r2
 800650e:	4798      	blx	r3
 8006510:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	2202      	movs	r2, #2
 8006518:	701a      	strb	r2, [r3, #0]
      break;
 800651a:	e0f2      	b.n	8006702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	885b      	ldrh	r3, [r3, #2]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b05      	cmp	r3, #5
 8006524:	f200 80ac 	bhi.w	8006680 <USBD_GetDescriptor+0x204>
 8006528:	a201      	add	r2, pc, #4	@ (adr r2, 8006530 <USBD_GetDescriptor+0xb4>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006549 	.word	0x08006549
 8006534:	0800657d 	.word	0x0800657d
 8006538:	080065b1 	.word	0x080065b1
 800653c:	080065e5 	.word	0x080065e5
 8006540:	08006619 	.word	0x08006619
 8006544:	0800664d 	.word	0x0800664d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	7c12      	ldrb	r2, [r2, #16]
 8006560:	f107 0108 	add.w	r1, r7, #8
 8006564:	4610      	mov	r0, r2
 8006566:	4798      	blx	r3
 8006568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800656a:	e091      	b.n	8006690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800656c:	6839      	ldr	r1, [r7, #0]
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 facb 	bl	8006b0a <USBD_CtlError>
            err++;
 8006574:	7afb      	ldrb	r3, [r7, #11]
 8006576:	3301      	adds	r3, #1
 8006578:	72fb      	strb	r3, [r7, #11]
          break;
 800657a:	e089      	b.n	8006690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	7c12      	ldrb	r2, [r2, #16]
 8006594:	f107 0108 	add.w	r1, r7, #8
 8006598:	4610      	mov	r0, r2
 800659a:	4798      	blx	r3
 800659c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800659e:	e077      	b.n	8006690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fab1 	bl	8006b0a <USBD_CtlError>
            err++;
 80065a8:	7afb      	ldrb	r3, [r7, #11]
 80065aa:	3301      	adds	r3, #1
 80065ac:	72fb      	strb	r3, [r7, #11]
          break;
 80065ae:	e06f      	b.n	8006690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00b      	beq.n	80065d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	7c12      	ldrb	r2, [r2, #16]
 80065c8:	f107 0108 	add.w	r1, r7, #8
 80065cc:	4610      	mov	r0, r2
 80065ce:	4798      	blx	r3
 80065d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065d2:	e05d      	b.n	8006690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa97 	bl	8006b0a <USBD_CtlError>
            err++;
 80065dc:	7afb      	ldrb	r3, [r7, #11]
 80065de:	3301      	adds	r3, #1
 80065e0:	72fb      	strb	r3, [r7, #11]
          break;
 80065e2:	e055      	b.n	8006690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	7c12      	ldrb	r2, [r2, #16]
 80065fc:	f107 0108 	add.w	r1, r7, #8
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006606:	e043      	b.n	8006690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa7d 	bl	8006b0a <USBD_CtlError>
            err++;
 8006610:	7afb      	ldrb	r3, [r7, #11]
 8006612:	3301      	adds	r3, #1
 8006614:	72fb      	strb	r3, [r7, #11]
          break;
 8006616:	e03b      	b.n	8006690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	7c12      	ldrb	r2, [r2, #16]
 8006630:	f107 0108 	add.w	r1, r7, #8
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800663a:	e029      	b.n	8006690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa63 	bl	8006b0a <USBD_CtlError>
            err++;
 8006644:	7afb      	ldrb	r3, [r7, #11]
 8006646:	3301      	adds	r3, #1
 8006648:	72fb      	strb	r3, [r7, #11]
          break;
 800664a:	e021      	b.n	8006690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	7c12      	ldrb	r2, [r2, #16]
 8006664:	f107 0108 	add.w	r1, r7, #8
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800666e:	e00f      	b.n	8006690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa49 	bl	8006b0a <USBD_CtlError>
            err++;
 8006678:	7afb      	ldrb	r3, [r7, #11]
 800667a:	3301      	adds	r3, #1
 800667c:	72fb      	strb	r3, [r7, #11]
          break;
 800667e:	e007      	b.n	8006690 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa41 	bl	8006b0a <USBD_CtlError>
          err++;
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	3301      	adds	r3, #1
 800668c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800668e:	bf00      	nop
      }
      break;
 8006690:	e037      	b.n	8006702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	7c1b      	ldrb	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a2:	f107 0208 	add.w	r2, r7, #8
 80066a6:	4610      	mov	r0, r2
 80066a8:	4798      	blx	r3
 80066aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066ac:	e029      	b.n	8006702 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fa2a 	bl	8006b0a <USBD_CtlError>
        err++;
 80066b6:	7afb      	ldrb	r3, [r7, #11]
 80066b8:	3301      	adds	r3, #1
 80066ba:	72fb      	strb	r3, [r7, #11]
      break;
 80066bc:	e021      	b.n	8006702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7c1b      	ldrb	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10d      	bne.n	80066e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ce:	f107 0208 	add.w	r2, r7, #8
 80066d2:	4610      	mov	r0, r2
 80066d4:	4798      	blx	r3
 80066d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	2207      	movs	r2, #7
 80066de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066e0:	e00f      	b.n	8006702 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fa10 	bl	8006b0a <USBD_CtlError>
        err++;
 80066ea:	7afb      	ldrb	r3, [r7, #11]
 80066ec:	3301      	adds	r3, #1
 80066ee:	72fb      	strb	r3, [r7, #11]
      break;
 80066f0:	e007      	b.n	8006702 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fa08 	bl	8006b0a <USBD_CtlError>
      err++;
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	3301      	adds	r3, #1
 80066fe:	72fb      	strb	r3, [r7, #11]
      break;
 8006700:	bf00      	nop
  }

  if (err != 0U)
 8006702:	7afb      	ldrb	r3, [r7, #11]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d11e      	bne.n	8006746 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	88db      	ldrh	r3, [r3, #6]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d016      	beq.n	800673e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006710:	893b      	ldrh	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00e      	beq.n	8006734 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	88da      	ldrh	r2, [r3, #6]
 800671a:	893b      	ldrh	r3, [r7, #8]
 800671c:	4293      	cmp	r3, r2
 800671e:	bf28      	it	cs
 8006720:	4613      	movcs	r3, r2
 8006722:	b29b      	uxth	r3, r3
 8006724:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006726:	893b      	ldrh	r3, [r7, #8]
 8006728:	461a      	mov	r2, r3
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fa69 	bl	8006c04 <USBD_CtlSendData>
 8006732:	e009      	b.n	8006748 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f9e7 	bl	8006b0a <USBD_CtlError>
 800673c:	e004      	b.n	8006748 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fac1 	bl	8006cc6 <USBD_CtlSendStatus>
 8006744:	e000      	b.n	8006748 <USBD_GetDescriptor+0x2cc>
    return;
 8006746:	bf00      	nop
  }
}
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop

08006750 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	889b      	ldrh	r3, [r3, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d131      	bne.n	80067c6 <USBD_SetAddress+0x76>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	88db      	ldrh	r3, [r3, #6]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d12d      	bne.n	80067c6 <USBD_SetAddress+0x76>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	885b      	ldrh	r3, [r3, #2]
 800676e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006770:	d829      	bhi.n	80067c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	885b      	ldrh	r3, [r3, #2]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800677c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b03      	cmp	r3, #3
 8006788:	d104      	bne.n	8006794 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f9bc 	bl	8006b0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006792:	e01d      	b.n	80067d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	7bfa      	ldrb	r2, [r7, #15]
 8006798:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 ff0f 	bl	80075c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa8d 	bl	8006cc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d004      	beq.n	80067bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ba:	e009      	b.n	80067d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c4:	e004      	b.n	80067d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f99e 	bl	8006b0a <USBD_CtlError>
  }
}
 80067ce:	bf00      	nop
 80067d0:	bf00      	nop
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	885b      	ldrh	r3, [r3, #2]
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	4b4e      	ldr	r3, [pc, #312]	@ (8006928 <USBD_SetConfig+0x150>)
 80067ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067f0:	4b4d      	ldr	r3, [pc, #308]	@ (8006928 <USBD_SetConfig+0x150>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d905      	bls.n	8006804 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f985 	bl	8006b0a <USBD_CtlError>
    return USBD_FAIL;
 8006800:	2303      	movs	r3, #3
 8006802:	e08c      	b.n	800691e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d002      	beq.n	8006816 <USBD_SetConfig+0x3e>
 8006810:	2b03      	cmp	r3, #3
 8006812:	d029      	beq.n	8006868 <USBD_SetConfig+0x90>
 8006814:	e075      	b.n	8006902 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006816:	4b44      	ldr	r3, [pc, #272]	@ (8006928 <USBD_SetConfig+0x150>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d020      	beq.n	8006860 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800681e:	4b42      	ldr	r3, [pc, #264]	@ (8006928 <USBD_SetConfig+0x150>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006828:	4b3f      	ldr	r3, [pc, #252]	@ (8006928 <USBD_SetConfig+0x150>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	4619      	mov	r1, r3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fe ffcf 	bl	80057d2 <USBD_SetClassConfig>
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f962 	bl	8006b0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800684e:	e065      	b.n	800691c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fa38 	bl	8006cc6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2203      	movs	r2, #3
 800685a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800685e:	e05d      	b.n	800691c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fa30 	bl	8006cc6 <USBD_CtlSendStatus>
      break;
 8006866:	e059      	b.n	800691c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006868:	4b2f      	ldr	r3, [pc, #188]	@ (8006928 <USBD_SetConfig+0x150>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d112      	bne.n	8006896 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006878:	4b2b      	ldr	r3, [pc, #172]	@ (8006928 <USBD_SetConfig+0x150>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006882:	4b29      	ldr	r3, [pc, #164]	@ (8006928 <USBD_SetConfig+0x150>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7fe ffbe 	bl	800580a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa19 	bl	8006cc6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006894:	e042      	b.n	800691c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006896:	4b24      	ldr	r3, [pc, #144]	@ (8006928 <USBD_SetConfig+0x150>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d02a      	beq.n	80068fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7fe ffac 	bl	800580a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80068b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <USBD_SetConfig+0x150>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006928 <USBD_SetConfig+0x150>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fe ff85 	bl	80057d2 <USBD_SetClassConfig>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00f      	beq.n	80068f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f918 	bl	8006b0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fe ff91 	bl	800580a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80068f0:	e014      	b.n	800691c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f9e7 	bl	8006cc6 <USBD_CtlSendStatus>
      break;
 80068f8:	e010      	b.n	800691c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f9e3 	bl	8006cc6 <USBD_CtlSendStatus>
      break;
 8006900:	e00c      	b.n	800691c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f900 	bl	8006b0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800690a:	4b07      	ldr	r3, [pc, #28]	@ (8006928 <USBD_SetConfig+0x150>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fe ff7a 	bl	800580a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006916:	2303      	movs	r3, #3
 8006918:	73fb      	strb	r3, [r7, #15]
      break;
 800691a:	bf00      	nop
  }

  return ret;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	200001b8 	.word	0x200001b8

0800692c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	88db      	ldrh	r3, [r3, #6]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d004      	beq.n	8006948 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f8e2 	bl	8006b0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006946:	e023      	b.n	8006990 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	dc02      	bgt.n	800695a <USBD_GetConfig+0x2e>
 8006954:	2b00      	cmp	r3, #0
 8006956:	dc03      	bgt.n	8006960 <USBD_GetConfig+0x34>
 8006958:	e015      	b.n	8006986 <USBD_GetConfig+0x5a>
 800695a:	2b03      	cmp	r3, #3
 800695c:	d00b      	beq.n	8006976 <USBD_GetConfig+0x4a>
 800695e:	e012      	b.n	8006986 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3308      	adds	r3, #8
 800696a:	2201      	movs	r2, #1
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f948 	bl	8006c04 <USBD_CtlSendData>
        break;
 8006974:	e00c      	b.n	8006990 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3304      	adds	r3, #4
 800697a:	2201      	movs	r2, #1
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f940 	bl	8006c04 <USBD_CtlSendData>
        break;
 8006984:	e004      	b.n	8006990 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f8be 	bl	8006b0a <USBD_CtlError>
        break;
 800698e:	bf00      	nop
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d81e      	bhi.n	80069ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	88db      	ldrh	r3, [r3, #6]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d004      	beq.n	80069c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f8a5 	bl	8006b0a <USBD_CtlError>
        break;
 80069c0:	e01a      	b.n	80069f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f043 0202 	orr.w	r2, r3, #2
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	330c      	adds	r3, #12
 80069e2:	2202      	movs	r2, #2
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f90c 	bl	8006c04 <USBD_CtlSendData>
      break;
 80069ec:	e004      	b.n	80069f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f88a 	bl	8006b0a <USBD_CtlError>
      break;
 80069f6:	bf00      	nop
  }
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	885b      	ldrh	r3, [r3, #2]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d107      	bne.n	8006a22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f953 	bl	8006cc6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006a20:	e013      	b.n	8006a4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	885b      	ldrh	r3, [r3, #2]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d10b      	bne.n	8006a42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	889b      	ldrh	r3, [r3, #4]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f943 	bl	8006cc6 <USBD_CtlSendStatus>
}
 8006a40:	e003      	b.n	8006a4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f860 	bl	8006b0a <USBD_CtlError>
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d80b      	bhi.n	8006a82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	885b      	ldrh	r3, [r3, #2]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d10c      	bne.n	8006a8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f923 	bl	8006cc6 <USBD_CtlSendStatus>
      }
      break;
 8006a80:	e004      	b.n	8006a8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f840 	bl	8006b0a <USBD_CtlError>
      break;
 8006a8a:	e000      	b.n	8006a8e <USBD_ClrFeature+0x3c>
      break;
 8006a8c:	bf00      	nop
  }
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	781a      	ldrb	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	781a      	ldrb	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f7ff fa3f 	bl	8005f44 <SWAPBYTE>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff fa32 	bl	8005f44 <SWAPBYTE>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	3301      	adds	r3, #1
 8006aec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fa25 	bl	8005f44 <SWAPBYTE>
 8006afa:	4603      	mov	r3, r0
 8006afc:	461a      	mov	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	80da      	strh	r2, [r3, #6]
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b14:	2180      	movs	r1, #128	@ 0x80
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fcea 	bl	80074f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fce6 	bl	80074f0 <USBD_LL_StallEP>
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d042      	beq.n	8006bc8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006b46:	6938      	ldr	r0, [r7, #16]
 8006b48:	f000 f842 	bl	8006bd0 <USBD_GetLen>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	3301      	adds	r3, #1
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b56:	d808      	bhi.n	8006b6a <USBD_GetString+0x3e>
 8006b58:	6938      	ldr	r0, [r7, #16]
 8006b5a:	f000 f839 	bl	8006bd0 <USBD_GetLen>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	3301      	adds	r3, #1
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	e001      	b.n	8006b6e <USBD_GetString+0x42>
 8006b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b72:	7dfb      	ldrb	r3, [r7, #23]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	4413      	add	r3, r2
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	3301      	adds	r3, #1
 8006b82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	4413      	add	r3, r2
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	3301      	adds	r3, #1
 8006b92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b94:	e013      	b.n	8006bbe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	7812      	ldrb	r2, [r2, #0]
 8006ba0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	613b      	str	r3, [r7, #16]
    idx++;
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	3301      	adds	r3, #1
 8006bac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e7      	bne.n	8006b96 <USBD_GetString+0x6a>
 8006bc6:	e000      	b.n	8006bca <USBD_GetString+0x9e>
    return;
 8006bc8:	bf00      	nop
  }
}
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006be0:	e005      	b.n	8006bee <USBD_GetLen+0x1e>
  {
    len++;
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	3301      	adds	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	3301      	adds	r3, #1
 8006bec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f5      	bne.n	8006be2 <USBD_GetLen+0x12>
  }

  return len;
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	2100      	movs	r1, #0
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fce6 	bl	8007602 <USBD_LL_Transmit>

  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	2100      	movs	r1, #0
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fcd5 	bl	8007602 <USBD_LL_Transmit>

  return USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2203      	movs	r2, #3
 8006c72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	2100      	movs	r1, #0
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 fcd5 	bl	8007644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fcc4 	bl	8007644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fc90 	bl	8007602 <USBD_LL_Transmit>

  return USBD_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2205      	movs	r2, #5
 8006cf8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2100      	movs	r1, #0
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fc9e 	bl	8007644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4912      	ldr	r1, [pc, #72]	@ (8006d64 <MX_USB_DEVICE_Init+0x50>)
 8006d1c:	4812      	ldr	r0, [pc, #72]	@ (8006d68 <MX_USB_DEVICE_Init+0x54>)
 8006d1e:	f7fe fcdb 	bl	80056d8 <USBD_Init>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d28:	f7f9 fd1e 	bl	8000768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d2c:	490f      	ldr	r1, [pc, #60]	@ (8006d6c <MX_USB_DEVICE_Init+0x58>)
 8006d2e:	480e      	ldr	r0, [pc, #56]	@ (8006d68 <MX_USB_DEVICE_Init+0x54>)
 8006d30:	f7fe fd02 	bl	8005738 <USBD_RegisterClass>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d3a:	f7f9 fd15 	bl	8000768 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d3e:	490c      	ldr	r1, [pc, #48]	@ (8006d70 <MX_USB_DEVICE_Init+0x5c>)
 8006d40:	4809      	ldr	r0, [pc, #36]	@ (8006d68 <MX_USB_DEVICE_Init+0x54>)
 8006d42:	f7fe fbf9 	bl	8005538 <USBD_CDC_RegisterInterface>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d4c:	f7f9 fd0c 	bl	8000768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d50:	4805      	ldr	r0, [pc, #20]	@ (8006d68 <MX_USB_DEVICE_Init+0x54>)
 8006d52:	f7fe fd27 	bl	80057a4 <USBD_Start>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d5c:	f7f9 fd04 	bl	8000768 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d60:	bf00      	nop
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	200000ac 	.word	0x200000ac
 8006d68:	200001bc 	.word	0x200001bc
 8006d6c:	20000018 	.word	0x20000018
 8006d70:	20000098 	.word	0x20000098

08006d74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4905      	ldr	r1, [pc, #20]	@ (8006d90 <CDC_Init_FS+0x1c>)
 8006d7c:	4805      	ldr	r0, [pc, #20]	@ (8006d94 <CDC_Init_FS+0x20>)
 8006d7e:	f7fe fbf5 	bl	800556c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d82:	4905      	ldr	r1, [pc, #20]	@ (8006d98 <CDC_Init_FS+0x24>)
 8006d84:	4803      	ldr	r0, [pc, #12]	@ (8006d94 <CDC_Init_FS+0x20>)
 8006d86:	f7fe fc13 	bl	80055b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20000898 	.word	0x20000898
 8006d94:	200001bc 	.word	0x200001bc
 8006d98:	20000498 	.word	0x20000498

08006d9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006da0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	71fb      	strb	r3, [r7, #7]
 8006db8:	4613      	mov	r3, r2
 8006dba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	2b23      	cmp	r3, #35	@ 0x23
 8006dc0:	d84a      	bhi.n	8006e58 <CDC_Control_FS+0xac>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <CDC_Control_FS+0x1c>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006e59 	.word	0x08006e59
 8006dcc:	08006e59 	.word	0x08006e59
 8006dd0:	08006e59 	.word	0x08006e59
 8006dd4:	08006e59 	.word	0x08006e59
 8006dd8:	08006e59 	.word	0x08006e59
 8006ddc:	08006e59 	.word	0x08006e59
 8006de0:	08006e59 	.word	0x08006e59
 8006de4:	08006e59 	.word	0x08006e59
 8006de8:	08006e59 	.word	0x08006e59
 8006dec:	08006e59 	.word	0x08006e59
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006e59 	.word	0x08006e59
 8006df8:	08006e59 	.word	0x08006e59
 8006dfc:	08006e59 	.word	0x08006e59
 8006e00:	08006e59 	.word	0x08006e59
 8006e04:	08006e59 	.word	0x08006e59
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006e59 	.word	0x08006e59
 8006e10:	08006e59 	.word	0x08006e59
 8006e14:	08006e59 	.word	0x08006e59
 8006e18:	08006e59 	.word	0x08006e59
 8006e1c:	08006e59 	.word	0x08006e59
 8006e20:	08006e59 	.word	0x08006e59
 8006e24:	08006e59 	.word	0x08006e59
 8006e28:	08006e59 	.word	0x08006e59
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	08006e59 	.word	0x08006e59
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e59 	.word	0x08006e59
 8006e3c:	08006e59 	.word	0x08006e59
 8006e40:	08006e59 	.word	0x08006e59
 8006e44:	08006e59 	.word	0x08006e59
 8006e48:	08006e59 	.word	0x08006e59
 8006e4c:	08006e59 	.word	0x08006e59
 8006e50:	08006e59 	.word	0x08006e59
 8006e54:	08006e59 	.word	0x08006e59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e58:	bf00      	nop
  }

  return (USBD_OK);
 8006e5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4805      	ldr	r0, [pc, #20]	@ (8006e8c <CDC_Receive_FS+0x24>)
 8006e76:	f7fe fb9b 	bl	80055b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e7a:	4804      	ldr	r0, [pc, #16]	@ (8006e8c <CDC_Receive_FS+0x24>)
 8006e7c:	f7fe fbf6 	bl	800566c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006e80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200001bc 	.word	0x200001bc

08006e90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <CDC_Transmit_FS+0x48>)
 8006ea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ea6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e00b      	b.n	8006ece <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006eb6:	887b      	ldrh	r3, [r7, #2]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4806      	ldr	r0, [pc, #24]	@ (8006ed8 <CDC_Transmit_FS+0x48>)
 8006ebe:	f7fe fb55 	bl	800556c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006ec2:	4805      	ldr	r0, [pc, #20]	@ (8006ed8 <CDC_Transmit_FS+0x48>)
 8006ec4:	f7fe fb92 	bl	80055ec <USBD_CDC_TransmitPacket>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200001bc 	.word	0x200001bc

08006edc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	6039      	str	r1, [r7, #0]
 8006f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2212      	movs	r2, #18
 8006f10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f12:	4b03      	ldr	r3, [pc, #12]	@ (8006f20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	200000c8 	.word	0x200000c8

08006f24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2204      	movs	r2, #4
 8006f34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	@ (8006f44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	200000dc 	.word	0x200000dc

08006f48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	4907      	ldr	r1, [pc, #28]	@ (8006f7c <USBD_FS_ProductStrDescriptor+0x34>)
 8006f5e:	4808      	ldr	r0, [pc, #32]	@ (8006f80 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f60:	f7ff fde4 	bl	8006b2c <USBD_GetString>
 8006f64:	e004      	b.n	8006f70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	4904      	ldr	r1, [pc, #16]	@ (8006f7c <USBD_FS_ProductStrDescriptor+0x34>)
 8006f6a:	4805      	ldr	r0, [pc, #20]	@ (8006f80 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f6c:	f7ff fdde 	bl	8006b2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f70:	4b02      	ldr	r3, [pc, #8]	@ (8006f7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000c98 	.word	0x20000c98
 8006f80:	080080a0 	.word	0x080080a0

08006f84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	6039      	str	r1, [r7, #0]
 8006f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	4904      	ldr	r1, [pc, #16]	@ (8006fa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f94:	4804      	ldr	r0, [pc, #16]	@ (8006fa8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f96:	f7ff fdc9 	bl	8006b2c <USBD_GetString>
  return USBD_StrDesc;
 8006f9a:	4b02      	ldr	r3, [pc, #8]	@ (8006fa4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20000c98 	.word	0x20000c98
 8006fa8:	080080b8 	.word	0x080080b8

08006fac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	6039      	str	r1, [r7, #0]
 8006fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	221a      	movs	r2, #26
 8006fbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fbe:	f000 f843 	bl	8007048 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fc2:	4b02      	ldr	r3, [pc, #8]	@ (8006fcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	200000e0 	.word	0x200000e0

08006fd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d105      	bne.n	8006fee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	4907      	ldr	r1, [pc, #28]	@ (8007004 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fe6:	4808      	ldr	r0, [pc, #32]	@ (8007008 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fe8:	f7ff fda0 	bl	8006b2c <USBD_GetString>
 8006fec:	e004      	b.n	8006ff8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	4904      	ldr	r1, [pc, #16]	@ (8007004 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006ff2:	4805      	ldr	r0, [pc, #20]	@ (8007008 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ff4:	f7ff fd9a 	bl	8006b2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ff8:	4b02      	ldr	r3, [pc, #8]	@ (8007004 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000c98 	.word	0x20000c98
 8007008:	080080cc 	.word	0x080080cc

0800700c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d105      	bne.n	800702a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	4907      	ldr	r1, [pc, #28]	@ (8007040 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007022:	4808      	ldr	r0, [pc, #32]	@ (8007044 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007024:	f7ff fd82 	bl	8006b2c <USBD_GetString>
 8007028:	e004      	b.n	8007034 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	4904      	ldr	r1, [pc, #16]	@ (8007040 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800702e:	4805      	ldr	r0, [pc, #20]	@ (8007044 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007030:	f7ff fd7c 	bl	8006b2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007034:	4b02      	ldr	r3, [pc, #8]	@ (8007040 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007036:	4618      	mov	r0, r3
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000c98 	.word	0x20000c98
 8007044:	080080d8 	.word	0x080080d8

08007048 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800704e:	4b0f      	ldr	r3, [pc, #60]	@ (800708c <Get_SerialNum+0x44>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007054:	4b0e      	ldr	r3, [pc, #56]	@ (8007090 <Get_SerialNum+0x48>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800705a:	4b0e      	ldr	r3, [pc, #56]	@ (8007094 <Get_SerialNum+0x4c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4413      	add	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800706e:	2208      	movs	r2, #8
 8007070:	4909      	ldr	r1, [pc, #36]	@ (8007098 <Get_SerialNum+0x50>)
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f814 	bl	80070a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007078:	2204      	movs	r2, #4
 800707a:	4908      	ldr	r1, [pc, #32]	@ (800709c <Get_SerialNum+0x54>)
 800707c:	68b8      	ldr	r0, [r7, #8]
 800707e:	f000 f80f 	bl	80070a0 <IntToUnicode>
  }
}
 8007082:	bf00      	nop
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	1fff7a10 	.word	0x1fff7a10
 8007090:	1fff7a14 	.word	0x1fff7a14
 8007094:	1fff7a18 	.word	0x1fff7a18
 8007098:	200000e2 	.word	0x200000e2
 800709c:	200000f2 	.word	0x200000f2

080070a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]
 80070b6:	e027      	b.n	8007108 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	0f1b      	lsrs	r3, r3, #28
 80070bc:	2b09      	cmp	r3, #9
 80070be:	d80b      	bhi.n	80070d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	0f1b      	lsrs	r3, r3, #28
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4619      	mov	r1, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	440b      	add	r3, r1
 80070d0:	3230      	adds	r2, #48	@ 0x30
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e00a      	b.n	80070ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	0f1b      	lsrs	r3, r3, #28
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	4619      	mov	r1, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	440b      	add	r3, r1
 80070e8:	3237      	adds	r2, #55	@ 0x37
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	3301      	adds	r3, #1
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	3301      	adds	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
 8007108:	7dfa      	ldrb	r2, [r7, #23]
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	429a      	cmp	r2, r3
 800710e:	d3d3      	bcc.n	80070b8 <IntToUnicode+0x18>
  }
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
	...

08007120 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08a      	sub	sp, #40	@ 0x28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007128:	f107 0314 	add.w	r3, r7, #20
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	609a      	str	r2, [r3, #8]
 8007134:	60da      	str	r2, [r3, #12]
 8007136:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007140:	d13a      	bne.n	80071b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007142:	2300      	movs	r3, #0
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	4b1e      	ldr	r3, [pc, #120]	@ (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714a:	4a1d      	ldr	r2, [pc, #116]	@ (80071c0 <HAL_PCD_MspInit+0xa0>)
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	6313      	str	r3, [r2, #48]	@ 0x30
 8007152:	4b1b      	ldr	r3, [pc, #108]	@ (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800715e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007164:	2302      	movs	r3, #2
 8007166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007168:	2300      	movs	r3, #0
 800716a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800716c:	2303      	movs	r3, #3
 800716e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007170:	230a      	movs	r3, #10
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007174:	f107 0314 	add.w	r3, r7, #20
 8007178:	4619      	mov	r1, r3
 800717a:	4812      	ldr	r0, [pc, #72]	@ (80071c4 <HAL_PCD_MspInit+0xa4>)
 800717c:	f7f9 fdbe 	bl	8000cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007180:	4b0f      	ldr	r3, [pc, #60]	@ (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007184:	4a0e      	ldr	r2, [pc, #56]	@ (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800718a:	6353      	str	r3, [r2, #52]	@ 0x34
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	4b0b      	ldr	r3, [pc, #44]	@ (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007194:	4a0a      	ldr	r2, [pc, #40]	@ (80071c0 <HAL_PCD_MspInit+0xa0>)
 8007196:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800719a:	6453      	str	r3, [r2, #68]	@ 0x44
 800719c:	4b08      	ldr	r3, [pc, #32]	@ (80071c0 <HAL_PCD_MspInit+0xa0>)
 800719e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071a8:	2200      	movs	r2, #0
 80071aa:	2100      	movs	r1, #0
 80071ac:	2043      	movs	r0, #67	@ 0x43
 80071ae:	f7f9 fd6e 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071b2:	2043      	movs	r0, #67	@ 0x43
 80071b4:	f7f9 fd87 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071b8:	bf00      	nop
 80071ba:	3728      	adds	r7, #40	@ 0x28
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	40023800 	.word	0x40023800
 80071c4:	40020000 	.word	0x40020000

080071c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f7fe fb2d 	bl	800583e <USBD_LL_SetupStage>
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	4619      	mov	r1, r3
 8007216:	f7fe fb67 	bl	80058e8 <USBD_LL_DataOutStage>
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4613      	mov	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	3320      	adds	r3, #32
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	4619      	mov	r1, r3
 800724a:	f7fe fc09 	bl	8005a60 <USBD_LL_DataInStage>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe fd4d 	bl	8005d04 <USBD_LL_SOF>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800727a:	2301      	movs	r3, #1
 800727c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	79db      	ldrb	r3, [r3, #7]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d001      	beq.n	800728a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007286:	f7f9 fa6f 	bl	8000768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007290:	7bfa      	ldrb	r2, [r7, #15]
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe fcf1 	bl	8005c7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe fc98 	bl	8005bd6 <USBD_LL_Reset>
}
 80072a6:	bf00      	nop
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe fcec 	bl	8005c9c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6812      	ldr	r2, [r2, #0]
 80072d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7adb      	ldrb	r3, [r3, #11]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072e4:	4b04      	ldr	r3, [pc, #16]	@ (80072f8 <HAL_PCD_SuspendCallback+0x48>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	4a03      	ldr	r2, [pc, #12]	@ (80072f8 <HAL_PCD_SuspendCallback+0x48>)
 80072ea:	f043 0306 	orr.w	r3, r3, #6
 80072ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	e000ed00 	.word	0xe000ed00

080072fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fce2 	bl	8005cd4 <USBD_LL_Resume>
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fd3a 	bl	8005da8 <USBD_LL_IsoOUTIncomplete>
}
 8007334:	bf00      	nop
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	4611      	mov	r1, r2
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fcf6 	bl	8005d44 <USBD_LL_IsoINIncomplete>
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fd4c 	bl	8005e0c <USBD_LL_DevConnected>
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fd49 	bl	8005e22 <USBD_LL_DevDisconnected>
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d13c      	bne.n	8007422 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80073a8:	4a20      	ldr	r2, [pc, #128]	@ (800742c <USBD_LL_Init+0x94>)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a1e      	ldr	r2, [pc, #120]	@ (800742c <USBD_LL_Init+0x94>)
 80073b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073b8:	4b1c      	ldr	r3, [pc, #112]	@ (800742c <USBD_LL_Init+0x94>)
 80073ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80073be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80073c0:	4b1a      	ldr	r3, [pc, #104]	@ (800742c <USBD_LL_Init+0x94>)
 80073c2:	2204      	movs	r2, #4
 80073c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80073c6:	4b19      	ldr	r3, [pc, #100]	@ (800742c <USBD_LL_Init+0x94>)
 80073c8:	2202      	movs	r2, #2
 80073ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073cc:	4b17      	ldr	r3, [pc, #92]	@ (800742c <USBD_LL_Init+0x94>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073d2:	4b16      	ldr	r3, [pc, #88]	@ (800742c <USBD_LL_Init+0x94>)
 80073d4:	2202      	movs	r2, #2
 80073d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073d8:	4b14      	ldr	r3, [pc, #80]	@ (800742c <USBD_LL_Init+0x94>)
 80073da:	2200      	movs	r2, #0
 80073dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80073de:	4b13      	ldr	r3, [pc, #76]	@ (800742c <USBD_LL_Init+0x94>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80073e4:	4b11      	ldr	r3, [pc, #68]	@ (800742c <USBD_LL_Init+0x94>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80073ea:	4b10      	ldr	r3, [pc, #64]	@ (800742c <USBD_LL_Init+0x94>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80073f0:	4b0e      	ldr	r3, [pc, #56]	@ (800742c <USBD_LL_Init+0x94>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80073f6:	480d      	ldr	r0, [pc, #52]	@ (800742c <USBD_LL_Init+0x94>)
 80073f8:	f7f9 fe04 	bl	8001004 <HAL_PCD_Init>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007402:	f7f9 f9b1 	bl	8000768 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007406:	2180      	movs	r1, #128	@ 0x80
 8007408:	4808      	ldr	r0, [pc, #32]	@ (800742c <USBD_LL_Init+0x94>)
 800740a:	f7fb f830 	bl	800246e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800740e:	2240      	movs	r2, #64	@ 0x40
 8007410:	2100      	movs	r1, #0
 8007412:	4806      	ldr	r0, [pc, #24]	@ (800742c <USBD_LL_Init+0x94>)
 8007414:	f7fa ffe4 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007418:	2280      	movs	r2, #128	@ 0x80
 800741a:	2101      	movs	r1, #1
 800741c:	4803      	ldr	r0, [pc, #12]	@ (800742c <USBD_LL_Init+0x94>)
 800741e:	f7fa ffdf 	bl	80023e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000e98 	.word	0x20000e98

08007430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007446:	4618      	mov	r0, r3
 8007448:	f7f9 feeb 	bl	8001222 <HAL_PCD_Start>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f942 	bl	80076dc <USBD_Get_USB_Status>
 8007458:	4603      	mov	r3, r0
 800745a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800745c:	7bbb      	ldrb	r3, [r7, #14]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	4608      	mov	r0, r1
 8007470:	4611      	mov	r1, r2
 8007472:	461a      	mov	r2, r3
 8007474:	4603      	mov	r3, r0
 8007476:	70fb      	strb	r3, [r7, #3]
 8007478:	460b      	mov	r3, r1
 800747a:	70bb      	strb	r3, [r7, #2]
 800747c:	4613      	mov	r3, r2
 800747e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800748e:	78bb      	ldrb	r3, [r7, #2]
 8007490:	883a      	ldrh	r2, [r7, #0]
 8007492:	78f9      	ldrb	r1, [r7, #3]
 8007494:	f7fa fbbf 	bl	8001c16 <HAL_PCD_EP_Open>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 f91c 	bl	80076dc <USBD_Get_USB_Status>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fa fc0a 	bl	8001cea <HAL_PCD_EP_Close>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 f8fd 	bl	80076dc <USBD_Get_USB_Status>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800750a:	78fa      	ldrb	r2, [r7, #3]
 800750c:	4611      	mov	r1, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f7fa fcc2 	bl	8001e98 <HAL_PCD_EP_SetStall>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f8de 	bl	80076dc <USBD_Get_USB_Status>
 8007520:	4603      	mov	r3, r0
 8007522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007524:	7bbb      	ldrb	r3, [r7, #14]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	4611      	mov	r1, r2
 800754c:	4618      	mov	r0, r3
 800754e:	f7fa fd06 	bl	8001f5e <HAL_PCD_EP_ClrStall>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 f8bf 	bl	80076dc <USBD_Get_USB_Status>
 800755e:	4603      	mov	r3, r0
 8007560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007562:	7bbb      	ldrb	r3, [r7, #14]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800757e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007584:	2b00      	cmp	r3, #0
 8007586:	da0b      	bge.n	80075a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800758e:	68f9      	ldr	r1, [r7, #12]
 8007590:	4613      	mov	r3, r2
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	3316      	adds	r3, #22
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	e00b      	b.n	80075b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	4613      	mov	r3, r2
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80075b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	4611      	mov	r1, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fa faf3 	bl	8001bce <HAL_PCD_SetAddress>
 80075e8:	4603      	mov	r3, r0
 80075ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f874 	bl	80076dc <USBD_Get_USB_Status>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b086      	sub	sp, #24
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
 800760e:	460b      	mov	r3, r1
 8007610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007620:	7af9      	ldrb	r1, [r7, #11]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	f7fa fbfd 	bl	8001e24 <HAL_PCD_EP_Transmit>
 800762a:	4603      	mov	r3, r0
 800762c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	4618      	mov	r0, r3
 8007632:	f000 f853 	bl	80076dc <USBD_Get_USB_Status>
 8007636:	4603      	mov	r3, r0
 8007638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800763a:	7dbb      	ldrb	r3, [r7, #22]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	460b      	mov	r3, r1
 8007652:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007662:	7af9      	ldrb	r1, [r7, #11]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	f7fa fb89 	bl	8001d7e <HAL_PCD_EP_Receive>
 800766c:	4603      	mov	r3, r0
 800766e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 f832 	bl	80076dc <USBD_Get_USB_Status>
 8007678:	4603      	mov	r3, r0
 800767a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800767c:	7dbb      	ldrb	r3, [r7, #22]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007698:	78fa      	ldrb	r2, [r7, #3]
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f7fa fba9 	bl	8001df4 <HAL_PCD_EP_GetRxCount>
 80076a2:	4603      	mov	r3, r0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80076b4:	4b03      	ldr	r3, [pc, #12]	@ (80076c4 <USBD_static_malloc+0x18>)
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000137c 	.word	0x2000137c

080076c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d817      	bhi.n	8007720 <USBD_Get_USB_Status+0x44>
 80076f0:	a201      	add	r2, pc, #4	@ (adr r2, 80076f8 <USBD_Get_USB_Status+0x1c>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	08007709 	.word	0x08007709
 80076fc:	0800770f 	.word	0x0800770f
 8007700:	08007715 	.word	0x08007715
 8007704:	0800771b 	.word	0x0800771b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	73fb      	strb	r3, [r7, #15]
    break;
 800770c:	e00b      	b.n	8007726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800770e:	2303      	movs	r3, #3
 8007710:	73fb      	strb	r3, [r7, #15]
    break;
 8007712:	e008      	b.n	8007726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
    break;
 8007718:	e005      	b.n	8007726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800771a:	2303      	movs	r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
    break;
 800771e:	e002      	b.n	8007726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007720:	2303      	movs	r3, #3
 8007722:	73fb      	strb	r3, [r7, #15]
    break;
 8007724:	bf00      	nop
  }
  return usb_status;
 8007726:	7bfb      	ldrb	r3, [r7, #15]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <siprintf>:
 8007734:	b40e      	push	{r1, r2, r3}
 8007736:	b500      	push	{lr}
 8007738:	b09c      	sub	sp, #112	@ 0x70
 800773a:	ab1d      	add	r3, sp, #116	@ 0x74
 800773c:	9002      	str	r0, [sp, #8]
 800773e:	9006      	str	r0, [sp, #24]
 8007740:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007744:	4809      	ldr	r0, [pc, #36]	@ (800776c <siprintf+0x38>)
 8007746:	9107      	str	r1, [sp, #28]
 8007748:	9104      	str	r1, [sp, #16]
 800774a:	4909      	ldr	r1, [pc, #36]	@ (8007770 <siprintf+0x3c>)
 800774c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007750:	9105      	str	r1, [sp, #20]
 8007752:	6800      	ldr	r0, [r0, #0]
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	a902      	add	r1, sp, #8
 8007758:	f000 f994 	bl	8007a84 <_svfiprintf_r>
 800775c:	9b02      	ldr	r3, [sp, #8]
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
 8007762:	b01c      	add	sp, #112	@ 0x70
 8007764:	f85d eb04 	ldr.w	lr, [sp], #4
 8007768:	b003      	add	sp, #12
 800776a:	4770      	bx	lr
 800776c:	200000fc 	.word	0x200000fc
 8007770:	ffff0208 	.word	0xffff0208

08007774 <memset>:
 8007774:	4402      	add	r2, r0
 8007776:	4603      	mov	r3, r0
 8007778:	4293      	cmp	r3, r2
 800777a:	d100      	bne.n	800777e <memset+0xa>
 800777c:	4770      	bx	lr
 800777e:	f803 1b01 	strb.w	r1, [r3], #1
 8007782:	e7f9      	b.n	8007778 <memset+0x4>

08007784 <__errno>:
 8007784:	4b01      	ldr	r3, [pc, #4]	@ (800778c <__errno+0x8>)
 8007786:	6818      	ldr	r0, [r3, #0]
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	200000fc 	.word	0x200000fc

08007790 <__libc_init_array>:
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	4d0d      	ldr	r5, [pc, #52]	@ (80077c8 <__libc_init_array+0x38>)
 8007794:	4c0d      	ldr	r4, [pc, #52]	@ (80077cc <__libc_init_array+0x3c>)
 8007796:	1b64      	subs	r4, r4, r5
 8007798:	10a4      	asrs	r4, r4, #2
 800779a:	2600      	movs	r6, #0
 800779c:	42a6      	cmp	r6, r4
 800779e:	d109      	bne.n	80077b4 <__libc_init_array+0x24>
 80077a0:	4d0b      	ldr	r5, [pc, #44]	@ (80077d0 <__libc_init_array+0x40>)
 80077a2:	4c0c      	ldr	r4, [pc, #48]	@ (80077d4 <__libc_init_array+0x44>)
 80077a4:	f000 fc66 	bl	8008074 <_init>
 80077a8:	1b64      	subs	r4, r4, r5
 80077aa:	10a4      	asrs	r4, r4, #2
 80077ac:	2600      	movs	r6, #0
 80077ae:	42a6      	cmp	r6, r4
 80077b0:	d105      	bne.n	80077be <__libc_init_array+0x2e>
 80077b2:	bd70      	pop	{r4, r5, r6, pc}
 80077b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b8:	4798      	blx	r3
 80077ba:	3601      	adds	r6, #1
 80077bc:	e7ee      	b.n	800779c <__libc_init_array+0xc>
 80077be:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c2:	4798      	blx	r3
 80077c4:	3601      	adds	r6, #1
 80077c6:	e7f2      	b.n	80077ae <__libc_init_array+0x1e>
 80077c8:	0800813c 	.word	0x0800813c
 80077cc:	0800813c 	.word	0x0800813c
 80077d0:	0800813c 	.word	0x0800813c
 80077d4:	08008140 	.word	0x08008140

080077d8 <__retarget_lock_acquire_recursive>:
 80077d8:	4770      	bx	lr

080077da <__retarget_lock_release_recursive>:
 80077da:	4770      	bx	lr

080077dc <_free_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4605      	mov	r5, r0
 80077e0:	2900      	cmp	r1, #0
 80077e2:	d041      	beq.n	8007868 <_free_r+0x8c>
 80077e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e8:	1f0c      	subs	r4, r1, #4
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	bfb8      	it	lt
 80077ee:	18e4      	addlt	r4, r4, r3
 80077f0:	f000 f8e0 	bl	80079b4 <__malloc_lock>
 80077f4:	4a1d      	ldr	r2, [pc, #116]	@ (800786c <_free_r+0x90>)
 80077f6:	6813      	ldr	r3, [r2, #0]
 80077f8:	b933      	cbnz	r3, 8007808 <_free_r+0x2c>
 80077fa:	6063      	str	r3, [r4, #4]
 80077fc:	6014      	str	r4, [r2, #0]
 80077fe:	4628      	mov	r0, r5
 8007800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007804:	f000 b8dc 	b.w	80079c0 <__malloc_unlock>
 8007808:	42a3      	cmp	r3, r4
 800780a:	d908      	bls.n	800781e <_free_r+0x42>
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	1821      	adds	r1, r4, r0
 8007810:	428b      	cmp	r3, r1
 8007812:	bf01      	itttt	eq
 8007814:	6819      	ldreq	r1, [r3, #0]
 8007816:	685b      	ldreq	r3, [r3, #4]
 8007818:	1809      	addeq	r1, r1, r0
 800781a:	6021      	streq	r1, [r4, #0]
 800781c:	e7ed      	b.n	80077fa <_free_r+0x1e>
 800781e:	461a      	mov	r2, r3
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	b10b      	cbz	r3, 8007828 <_free_r+0x4c>
 8007824:	42a3      	cmp	r3, r4
 8007826:	d9fa      	bls.n	800781e <_free_r+0x42>
 8007828:	6811      	ldr	r1, [r2, #0]
 800782a:	1850      	adds	r0, r2, r1
 800782c:	42a0      	cmp	r0, r4
 800782e:	d10b      	bne.n	8007848 <_free_r+0x6c>
 8007830:	6820      	ldr	r0, [r4, #0]
 8007832:	4401      	add	r1, r0
 8007834:	1850      	adds	r0, r2, r1
 8007836:	4283      	cmp	r3, r0
 8007838:	6011      	str	r1, [r2, #0]
 800783a:	d1e0      	bne.n	80077fe <_free_r+0x22>
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	6053      	str	r3, [r2, #4]
 8007842:	4408      	add	r0, r1
 8007844:	6010      	str	r0, [r2, #0]
 8007846:	e7da      	b.n	80077fe <_free_r+0x22>
 8007848:	d902      	bls.n	8007850 <_free_r+0x74>
 800784a:	230c      	movs	r3, #12
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	e7d6      	b.n	80077fe <_free_r+0x22>
 8007850:	6820      	ldr	r0, [r4, #0]
 8007852:	1821      	adds	r1, r4, r0
 8007854:	428b      	cmp	r3, r1
 8007856:	bf04      	itt	eq
 8007858:	6819      	ldreq	r1, [r3, #0]
 800785a:	685b      	ldreq	r3, [r3, #4]
 800785c:	6063      	str	r3, [r4, #4]
 800785e:	bf04      	itt	eq
 8007860:	1809      	addeq	r1, r1, r0
 8007862:	6021      	streq	r1, [r4, #0]
 8007864:	6054      	str	r4, [r2, #4]
 8007866:	e7ca      	b.n	80077fe <_free_r+0x22>
 8007868:	bd38      	pop	{r3, r4, r5, pc}
 800786a:	bf00      	nop
 800786c:	200016e0 	.word	0x200016e0

08007870 <sbrk_aligned>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	4e0f      	ldr	r6, [pc, #60]	@ (80078b0 <sbrk_aligned+0x40>)
 8007874:	460c      	mov	r4, r1
 8007876:	6831      	ldr	r1, [r6, #0]
 8007878:	4605      	mov	r5, r0
 800787a:	b911      	cbnz	r1, 8007882 <sbrk_aligned+0x12>
 800787c:	f000 fba6 	bl	8007fcc <_sbrk_r>
 8007880:	6030      	str	r0, [r6, #0]
 8007882:	4621      	mov	r1, r4
 8007884:	4628      	mov	r0, r5
 8007886:	f000 fba1 	bl	8007fcc <_sbrk_r>
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	d103      	bne.n	8007896 <sbrk_aligned+0x26>
 800788e:	f04f 34ff 	mov.w	r4, #4294967295
 8007892:	4620      	mov	r0, r4
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	1cc4      	adds	r4, r0, #3
 8007898:	f024 0403 	bic.w	r4, r4, #3
 800789c:	42a0      	cmp	r0, r4
 800789e:	d0f8      	beq.n	8007892 <sbrk_aligned+0x22>
 80078a0:	1a21      	subs	r1, r4, r0
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 fb92 	bl	8007fcc <_sbrk_r>
 80078a8:	3001      	adds	r0, #1
 80078aa:	d1f2      	bne.n	8007892 <sbrk_aligned+0x22>
 80078ac:	e7ef      	b.n	800788e <sbrk_aligned+0x1e>
 80078ae:	bf00      	nop
 80078b0:	200016dc 	.word	0x200016dc

080078b4 <_malloc_r>:
 80078b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b8:	1ccd      	adds	r5, r1, #3
 80078ba:	f025 0503 	bic.w	r5, r5, #3
 80078be:	3508      	adds	r5, #8
 80078c0:	2d0c      	cmp	r5, #12
 80078c2:	bf38      	it	cc
 80078c4:	250c      	movcc	r5, #12
 80078c6:	2d00      	cmp	r5, #0
 80078c8:	4606      	mov	r6, r0
 80078ca:	db01      	blt.n	80078d0 <_malloc_r+0x1c>
 80078cc:	42a9      	cmp	r1, r5
 80078ce:	d904      	bls.n	80078da <_malloc_r+0x26>
 80078d0:	230c      	movs	r3, #12
 80078d2:	6033      	str	r3, [r6, #0]
 80078d4:	2000      	movs	r0, #0
 80078d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079b0 <_malloc_r+0xfc>
 80078de:	f000 f869 	bl	80079b4 <__malloc_lock>
 80078e2:	f8d8 3000 	ldr.w	r3, [r8]
 80078e6:	461c      	mov	r4, r3
 80078e8:	bb44      	cbnz	r4, 800793c <_malloc_r+0x88>
 80078ea:	4629      	mov	r1, r5
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7ff ffbf 	bl	8007870 <sbrk_aligned>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	4604      	mov	r4, r0
 80078f6:	d158      	bne.n	80079aa <_malloc_r+0xf6>
 80078f8:	f8d8 4000 	ldr.w	r4, [r8]
 80078fc:	4627      	mov	r7, r4
 80078fe:	2f00      	cmp	r7, #0
 8007900:	d143      	bne.n	800798a <_malloc_r+0xd6>
 8007902:	2c00      	cmp	r4, #0
 8007904:	d04b      	beq.n	800799e <_malloc_r+0xea>
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	4639      	mov	r1, r7
 800790a:	4630      	mov	r0, r6
 800790c:	eb04 0903 	add.w	r9, r4, r3
 8007910:	f000 fb5c 	bl	8007fcc <_sbrk_r>
 8007914:	4581      	cmp	r9, r0
 8007916:	d142      	bne.n	800799e <_malloc_r+0xea>
 8007918:	6821      	ldr	r1, [r4, #0]
 800791a:	1a6d      	subs	r5, r5, r1
 800791c:	4629      	mov	r1, r5
 800791e:	4630      	mov	r0, r6
 8007920:	f7ff ffa6 	bl	8007870 <sbrk_aligned>
 8007924:	3001      	adds	r0, #1
 8007926:	d03a      	beq.n	800799e <_malloc_r+0xea>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	442b      	add	r3, r5
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	f8d8 3000 	ldr.w	r3, [r8]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	bb62      	cbnz	r2, 8007990 <_malloc_r+0xdc>
 8007936:	f8c8 7000 	str.w	r7, [r8]
 800793a:	e00f      	b.n	800795c <_malloc_r+0xa8>
 800793c:	6822      	ldr	r2, [r4, #0]
 800793e:	1b52      	subs	r2, r2, r5
 8007940:	d420      	bmi.n	8007984 <_malloc_r+0xd0>
 8007942:	2a0b      	cmp	r2, #11
 8007944:	d917      	bls.n	8007976 <_malloc_r+0xc2>
 8007946:	1961      	adds	r1, r4, r5
 8007948:	42a3      	cmp	r3, r4
 800794a:	6025      	str	r5, [r4, #0]
 800794c:	bf18      	it	ne
 800794e:	6059      	strne	r1, [r3, #4]
 8007950:	6863      	ldr	r3, [r4, #4]
 8007952:	bf08      	it	eq
 8007954:	f8c8 1000 	streq.w	r1, [r8]
 8007958:	5162      	str	r2, [r4, r5]
 800795a:	604b      	str	r3, [r1, #4]
 800795c:	4630      	mov	r0, r6
 800795e:	f000 f82f 	bl	80079c0 <__malloc_unlock>
 8007962:	f104 000b 	add.w	r0, r4, #11
 8007966:	1d23      	adds	r3, r4, #4
 8007968:	f020 0007 	bic.w	r0, r0, #7
 800796c:	1ac2      	subs	r2, r0, r3
 800796e:	bf1c      	itt	ne
 8007970:	1a1b      	subne	r3, r3, r0
 8007972:	50a3      	strne	r3, [r4, r2]
 8007974:	e7af      	b.n	80078d6 <_malloc_r+0x22>
 8007976:	6862      	ldr	r2, [r4, #4]
 8007978:	42a3      	cmp	r3, r4
 800797a:	bf0c      	ite	eq
 800797c:	f8c8 2000 	streq.w	r2, [r8]
 8007980:	605a      	strne	r2, [r3, #4]
 8007982:	e7eb      	b.n	800795c <_malloc_r+0xa8>
 8007984:	4623      	mov	r3, r4
 8007986:	6864      	ldr	r4, [r4, #4]
 8007988:	e7ae      	b.n	80078e8 <_malloc_r+0x34>
 800798a:	463c      	mov	r4, r7
 800798c:	687f      	ldr	r7, [r7, #4]
 800798e:	e7b6      	b.n	80078fe <_malloc_r+0x4a>
 8007990:	461a      	mov	r2, r3
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	42a3      	cmp	r3, r4
 8007996:	d1fb      	bne.n	8007990 <_malloc_r+0xdc>
 8007998:	2300      	movs	r3, #0
 800799a:	6053      	str	r3, [r2, #4]
 800799c:	e7de      	b.n	800795c <_malloc_r+0xa8>
 800799e:	230c      	movs	r3, #12
 80079a0:	6033      	str	r3, [r6, #0]
 80079a2:	4630      	mov	r0, r6
 80079a4:	f000 f80c 	bl	80079c0 <__malloc_unlock>
 80079a8:	e794      	b.n	80078d4 <_malloc_r+0x20>
 80079aa:	6005      	str	r5, [r0, #0]
 80079ac:	e7d6      	b.n	800795c <_malloc_r+0xa8>
 80079ae:	bf00      	nop
 80079b0:	200016e0 	.word	0x200016e0

080079b4 <__malloc_lock>:
 80079b4:	4801      	ldr	r0, [pc, #4]	@ (80079bc <__malloc_lock+0x8>)
 80079b6:	f7ff bf0f 	b.w	80077d8 <__retarget_lock_acquire_recursive>
 80079ba:	bf00      	nop
 80079bc:	200016d8 	.word	0x200016d8

080079c0 <__malloc_unlock>:
 80079c0:	4801      	ldr	r0, [pc, #4]	@ (80079c8 <__malloc_unlock+0x8>)
 80079c2:	f7ff bf0a 	b.w	80077da <__retarget_lock_release_recursive>
 80079c6:	bf00      	nop
 80079c8:	200016d8 	.word	0x200016d8

080079cc <__ssputs_r>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	688e      	ldr	r6, [r1, #8]
 80079d2:	461f      	mov	r7, r3
 80079d4:	42be      	cmp	r6, r7
 80079d6:	680b      	ldr	r3, [r1, #0]
 80079d8:	4682      	mov	sl, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	4690      	mov	r8, r2
 80079de:	d82d      	bhi.n	8007a3c <__ssputs_r+0x70>
 80079e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079e8:	d026      	beq.n	8007a38 <__ssputs_r+0x6c>
 80079ea:	6965      	ldr	r5, [r4, #20]
 80079ec:	6909      	ldr	r1, [r1, #16]
 80079ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079f2:	eba3 0901 	sub.w	r9, r3, r1
 80079f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079fa:	1c7b      	adds	r3, r7, #1
 80079fc:	444b      	add	r3, r9
 80079fe:	106d      	asrs	r5, r5, #1
 8007a00:	429d      	cmp	r5, r3
 8007a02:	bf38      	it	cc
 8007a04:	461d      	movcc	r5, r3
 8007a06:	0553      	lsls	r3, r2, #21
 8007a08:	d527      	bpl.n	8007a5a <__ssputs_r+0x8e>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7ff ff52 	bl	80078b4 <_malloc_r>
 8007a10:	4606      	mov	r6, r0
 8007a12:	b360      	cbz	r0, 8007a6e <__ssputs_r+0xa2>
 8007a14:	6921      	ldr	r1, [r4, #16]
 8007a16:	464a      	mov	r2, r9
 8007a18:	f000 fae8 	bl	8007fec <memcpy>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	6126      	str	r6, [r4, #16]
 8007a2a:	6165      	str	r5, [r4, #20]
 8007a2c:	444e      	add	r6, r9
 8007a2e:	eba5 0509 	sub.w	r5, r5, r9
 8007a32:	6026      	str	r6, [r4, #0]
 8007a34:	60a5      	str	r5, [r4, #8]
 8007a36:	463e      	mov	r6, r7
 8007a38:	42be      	cmp	r6, r7
 8007a3a:	d900      	bls.n	8007a3e <__ssputs_r+0x72>
 8007a3c:	463e      	mov	r6, r7
 8007a3e:	6820      	ldr	r0, [r4, #0]
 8007a40:	4632      	mov	r2, r6
 8007a42:	4641      	mov	r1, r8
 8007a44:	f000 faa8 	bl	8007f98 <memmove>
 8007a48:	68a3      	ldr	r3, [r4, #8]
 8007a4a:	1b9b      	subs	r3, r3, r6
 8007a4c:	60a3      	str	r3, [r4, #8]
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	4433      	add	r3, r6
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	2000      	movs	r0, #0
 8007a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	f000 fad4 	bl	8008008 <_realloc_r>
 8007a60:	4606      	mov	r6, r0
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d1e0      	bne.n	8007a28 <__ssputs_r+0x5c>
 8007a66:	6921      	ldr	r1, [r4, #16]
 8007a68:	4650      	mov	r0, sl
 8007a6a:	f7ff feb7 	bl	80077dc <_free_r>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	f8ca 3000 	str.w	r3, [sl]
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a7a:	81a3      	strh	r3, [r4, #12]
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	e7e9      	b.n	8007a56 <__ssputs_r+0x8a>
	...

08007a84 <_svfiprintf_r>:
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	4698      	mov	r8, r3
 8007a8a:	898b      	ldrh	r3, [r1, #12]
 8007a8c:	061b      	lsls	r3, r3, #24
 8007a8e:	b09d      	sub	sp, #116	@ 0x74
 8007a90:	4607      	mov	r7, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	4614      	mov	r4, r2
 8007a96:	d510      	bpl.n	8007aba <_svfiprintf_r+0x36>
 8007a98:	690b      	ldr	r3, [r1, #16]
 8007a9a:	b973      	cbnz	r3, 8007aba <_svfiprintf_r+0x36>
 8007a9c:	2140      	movs	r1, #64	@ 0x40
 8007a9e:	f7ff ff09 	bl	80078b4 <_malloc_r>
 8007aa2:	6028      	str	r0, [r5, #0]
 8007aa4:	6128      	str	r0, [r5, #16]
 8007aa6:	b930      	cbnz	r0, 8007ab6 <_svfiprintf_r+0x32>
 8007aa8:	230c      	movs	r3, #12
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	b01d      	add	sp, #116	@ 0x74
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	2340      	movs	r3, #64	@ 0x40
 8007ab8:	616b      	str	r3, [r5, #20]
 8007aba:	2300      	movs	r3, #0
 8007abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007abe:	2320      	movs	r3, #32
 8007ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ac8:	2330      	movs	r3, #48	@ 0x30
 8007aca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c68 <_svfiprintf_r+0x1e4>
 8007ace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ad2:	f04f 0901 	mov.w	r9, #1
 8007ad6:	4623      	mov	r3, r4
 8007ad8:	469a      	mov	sl, r3
 8007ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ade:	b10a      	cbz	r2, 8007ae4 <_svfiprintf_r+0x60>
 8007ae0:	2a25      	cmp	r2, #37	@ 0x25
 8007ae2:	d1f9      	bne.n	8007ad8 <_svfiprintf_r+0x54>
 8007ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ae8:	d00b      	beq.n	8007b02 <_svfiprintf_r+0x7e>
 8007aea:	465b      	mov	r3, fp
 8007aec:	4622      	mov	r2, r4
 8007aee:	4629      	mov	r1, r5
 8007af0:	4638      	mov	r0, r7
 8007af2:	f7ff ff6b 	bl	80079cc <__ssputs_r>
 8007af6:	3001      	adds	r0, #1
 8007af8:	f000 80a7 	beq.w	8007c4a <_svfiprintf_r+0x1c6>
 8007afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007afe:	445a      	add	r2, fp
 8007b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b02:	f89a 3000 	ldrb.w	r3, [sl]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 809f 	beq.w	8007c4a <_svfiprintf_r+0x1c6>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b16:	f10a 0a01 	add.w	sl, sl, #1
 8007b1a:	9304      	str	r3, [sp, #16]
 8007b1c:	9307      	str	r3, [sp, #28]
 8007b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b24:	4654      	mov	r4, sl
 8007b26:	2205      	movs	r2, #5
 8007b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2c:	484e      	ldr	r0, [pc, #312]	@ (8007c68 <_svfiprintf_r+0x1e4>)
 8007b2e:	f7f8 fb5f 	bl	80001f0 <memchr>
 8007b32:	9a04      	ldr	r2, [sp, #16]
 8007b34:	b9d8      	cbnz	r0, 8007b6e <_svfiprintf_r+0xea>
 8007b36:	06d0      	lsls	r0, r2, #27
 8007b38:	bf44      	itt	mi
 8007b3a:	2320      	movmi	r3, #32
 8007b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b40:	0711      	lsls	r1, r2, #28
 8007b42:	bf44      	itt	mi
 8007b44:	232b      	movmi	r3, #43	@ 0x2b
 8007b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b50:	d015      	beq.n	8007b7e <_svfiprintf_r+0xfa>
 8007b52:	9a07      	ldr	r2, [sp, #28]
 8007b54:	4654      	mov	r4, sl
 8007b56:	2000      	movs	r0, #0
 8007b58:	f04f 0c0a 	mov.w	ip, #10
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b62:	3b30      	subs	r3, #48	@ 0x30
 8007b64:	2b09      	cmp	r3, #9
 8007b66:	d94b      	bls.n	8007c00 <_svfiprintf_r+0x17c>
 8007b68:	b1b0      	cbz	r0, 8007b98 <_svfiprintf_r+0x114>
 8007b6a:	9207      	str	r2, [sp, #28]
 8007b6c:	e014      	b.n	8007b98 <_svfiprintf_r+0x114>
 8007b6e:	eba0 0308 	sub.w	r3, r0, r8
 8007b72:	fa09 f303 	lsl.w	r3, r9, r3
 8007b76:	4313      	orrs	r3, r2
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	46a2      	mov	sl, r4
 8007b7c:	e7d2      	b.n	8007b24 <_svfiprintf_r+0xa0>
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	1d19      	adds	r1, r3, #4
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	9103      	str	r1, [sp, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bfbb      	ittet	lt
 8007b8a:	425b      	neglt	r3, r3
 8007b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b90:	9307      	strge	r3, [sp, #28]
 8007b92:	9307      	strlt	r3, [sp, #28]
 8007b94:	bfb8      	it	lt
 8007b96:	9204      	strlt	r2, [sp, #16]
 8007b98:	7823      	ldrb	r3, [r4, #0]
 8007b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b9c:	d10a      	bne.n	8007bb4 <_svfiprintf_r+0x130>
 8007b9e:	7863      	ldrb	r3, [r4, #1]
 8007ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ba2:	d132      	bne.n	8007c0a <_svfiprintf_r+0x186>
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	1d1a      	adds	r2, r3, #4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	9203      	str	r2, [sp, #12]
 8007bac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bb0:	3402      	adds	r4, #2
 8007bb2:	9305      	str	r3, [sp, #20]
 8007bb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c78 <_svfiprintf_r+0x1f4>
 8007bb8:	7821      	ldrb	r1, [r4, #0]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	f7f8 fb17 	bl	80001f0 <memchr>
 8007bc2:	b138      	cbz	r0, 8007bd4 <_svfiprintf_r+0x150>
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	eba0 000a 	sub.w	r0, r0, sl
 8007bca:	2240      	movs	r2, #64	@ 0x40
 8007bcc:	4082      	lsls	r2, r0
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	3401      	adds	r4, #1
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd8:	4824      	ldr	r0, [pc, #144]	@ (8007c6c <_svfiprintf_r+0x1e8>)
 8007bda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bde:	2206      	movs	r2, #6
 8007be0:	f7f8 fb06 	bl	80001f0 <memchr>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d036      	beq.n	8007c56 <_svfiprintf_r+0x1d2>
 8007be8:	4b21      	ldr	r3, [pc, #132]	@ (8007c70 <_svfiprintf_r+0x1ec>)
 8007bea:	bb1b      	cbnz	r3, 8007c34 <_svfiprintf_r+0x1b0>
 8007bec:	9b03      	ldr	r3, [sp, #12]
 8007bee:	3307      	adds	r3, #7
 8007bf0:	f023 0307 	bic.w	r3, r3, #7
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bfa:	4433      	add	r3, r6
 8007bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bfe:	e76a      	b.n	8007ad6 <_svfiprintf_r+0x52>
 8007c00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c04:	460c      	mov	r4, r1
 8007c06:	2001      	movs	r0, #1
 8007c08:	e7a8      	b.n	8007b5c <_svfiprintf_r+0xd8>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	3401      	adds	r4, #1
 8007c0e:	9305      	str	r3, [sp, #20]
 8007c10:	4619      	mov	r1, r3
 8007c12:	f04f 0c0a 	mov.w	ip, #10
 8007c16:	4620      	mov	r0, r4
 8007c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1c:	3a30      	subs	r2, #48	@ 0x30
 8007c1e:	2a09      	cmp	r2, #9
 8007c20:	d903      	bls.n	8007c2a <_svfiprintf_r+0x1a6>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0c6      	beq.n	8007bb4 <_svfiprintf_r+0x130>
 8007c26:	9105      	str	r1, [sp, #20]
 8007c28:	e7c4      	b.n	8007bb4 <_svfiprintf_r+0x130>
 8007c2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c2e:	4604      	mov	r4, r0
 8007c30:	2301      	movs	r3, #1
 8007c32:	e7f0      	b.n	8007c16 <_svfiprintf_r+0x192>
 8007c34:	ab03      	add	r3, sp, #12
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	462a      	mov	r2, r5
 8007c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c74 <_svfiprintf_r+0x1f0>)
 8007c3c:	a904      	add	r1, sp, #16
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f3af 8000 	nop.w
 8007c44:	1c42      	adds	r2, r0, #1
 8007c46:	4606      	mov	r6, r0
 8007c48:	d1d6      	bne.n	8007bf8 <_svfiprintf_r+0x174>
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	065b      	lsls	r3, r3, #25
 8007c4e:	f53f af2d 	bmi.w	8007aac <_svfiprintf_r+0x28>
 8007c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c54:	e72c      	b.n	8007ab0 <_svfiprintf_r+0x2c>
 8007c56:	ab03      	add	r3, sp, #12
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	462a      	mov	r2, r5
 8007c5c:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <_svfiprintf_r+0x1f0>)
 8007c5e:	a904      	add	r1, sp, #16
 8007c60:	4638      	mov	r0, r7
 8007c62:	f000 f879 	bl	8007d58 <_printf_i>
 8007c66:	e7ed      	b.n	8007c44 <_svfiprintf_r+0x1c0>
 8007c68:	08008100 	.word	0x08008100
 8007c6c:	0800810a 	.word	0x0800810a
 8007c70:	00000000 	.word	0x00000000
 8007c74:	080079cd 	.word	0x080079cd
 8007c78:	08008106 	.word	0x08008106

08007c7c <_printf_common>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	4616      	mov	r6, r2
 8007c82:	4698      	mov	r8, r3
 8007c84:	688a      	ldr	r2, [r1, #8]
 8007c86:	690b      	ldr	r3, [r1, #16]
 8007c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	bfb8      	it	lt
 8007c90:	4613      	movlt	r3, r2
 8007c92:	6033      	str	r3, [r6, #0]
 8007c94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c98:	4607      	mov	r7, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	b10a      	cbz	r2, 8007ca2 <_printf_common+0x26>
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	6033      	str	r3, [r6, #0]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	0699      	lsls	r1, r3, #26
 8007ca6:	bf42      	ittt	mi
 8007ca8:	6833      	ldrmi	r3, [r6, #0]
 8007caa:	3302      	addmi	r3, #2
 8007cac:	6033      	strmi	r3, [r6, #0]
 8007cae:	6825      	ldr	r5, [r4, #0]
 8007cb0:	f015 0506 	ands.w	r5, r5, #6
 8007cb4:	d106      	bne.n	8007cc4 <_printf_common+0x48>
 8007cb6:	f104 0a19 	add.w	sl, r4, #25
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	6832      	ldr	r2, [r6, #0]
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	dc26      	bgt.n	8007d12 <_printf_common+0x96>
 8007cc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cc8:	6822      	ldr	r2, [r4, #0]
 8007cca:	3b00      	subs	r3, #0
 8007ccc:	bf18      	it	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	0692      	lsls	r2, r2, #26
 8007cd2:	d42b      	bmi.n	8007d2c <_printf_common+0xb0>
 8007cd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cd8:	4641      	mov	r1, r8
 8007cda:	4638      	mov	r0, r7
 8007cdc:	47c8      	blx	r9
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d01e      	beq.n	8007d20 <_printf_common+0xa4>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	6922      	ldr	r2, [r4, #16]
 8007ce6:	f003 0306 	and.w	r3, r3, #6
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	bf02      	ittt	eq
 8007cee:	68e5      	ldreq	r5, [r4, #12]
 8007cf0:	6833      	ldreq	r3, [r6, #0]
 8007cf2:	1aed      	subeq	r5, r5, r3
 8007cf4:	68a3      	ldr	r3, [r4, #8]
 8007cf6:	bf0c      	ite	eq
 8007cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cfc:	2500      	movne	r5, #0
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	bfc4      	itt	gt
 8007d02:	1a9b      	subgt	r3, r3, r2
 8007d04:	18ed      	addgt	r5, r5, r3
 8007d06:	2600      	movs	r6, #0
 8007d08:	341a      	adds	r4, #26
 8007d0a:	42b5      	cmp	r5, r6
 8007d0c:	d11a      	bne.n	8007d44 <_printf_common+0xc8>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e008      	b.n	8007d24 <_printf_common+0xa8>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4652      	mov	r2, sl
 8007d16:	4641      	mov	r1, r8
 8007d18:	4638      	mov	r0, r7
 8007d1a:	47c8      	blx	r9
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d103      	bne.n	8007d28 <_printf_common+0xac>
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d28:	3501      	adds	r5, #1
 8007d2a:	e7c6      	b.n	8007cba <_printf_common+0x3e>
 8007d2c:	18e1      	adds	r1, r4, r3
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	2030      	movs	r0, #48	@ 0x30
 8007d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d36:	4422      	add	r2, r4
 8007d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d40:	3302      	adds	r3, #2
 8007d42:	e7c7      	b.n	8007cd4 <_printf_common+0x58>
 8007d44:	2301      	movs	r3, #1
 8007d46:	4622      	mov	r2, r4
 8007d48:	4641      	mov	r1, r8
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	47c8      	blx	r9
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d0e6      	beq.n	8007d20 <_printf_common+0xa4>
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7d9      	b.n	8007d0a <_printf_common+0x8e>
	...

08007d58 <_printf_i>:
 8007d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	7e0f      	ldrb	r7, [r1, #24]
 8007d5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d60:	2f78      	cmp	r7, #120	@ 0x78
 8007d62:	4691      	mov	r9, r2
 8007d64:	4680      	mov	r8, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	469a      	mov	sl, r3
 8007d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d6e:	d807      	bhi.n	8007d80 <_printf_i+0x28>
 8007d70:	2f62      	cmp	r7, #98	@ 0x62
 8007d72:	d80a      	bhi.n	8007d8a <_printf_i+0x32>
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	f000 80d2 	beq.w	8007f1e <_printf_i+0x1c6>
 8007d7a:	2f58      	cmp	r7, #88	@ 0x58
 8007d7c:	f000 80b9 	beq.w	8007ef2 <_printf_i+0x19a>
 8007d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d88:	e03a      	b.n	8007e00 <_printf_i+0xa8>
 8007d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d8e:	2b15      	cmp	r3, #21
 8007d90:	d8f6      	bhi.n	8007d80 <_printf_i+0x28>
 8007d92:	a101      	add	r1, pc, #4	@ (adr r1, 8007d98 <_printf_i+0x40>)
 8007d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007e05 	.word	0x08007e05
 8007da0:	08007d81 	.word	0x08007d81
 8007da4:	08007d81 	.word	0x08007d81
 8007da8:	08007d81 	.word	0x08007d81
 8007dac:	08007d81 	.word	0x08007d81
 8007db0:	08007e05 	.word	0x08007e05
 8007db4:	08007d81 	.word	0x08007d81
 8007db8:	08007d81 	.word	0x08007d81
 8007dbc:	08007d81 	.word	0x08007d81
 8007dc0:	08007d81 	.word	0x08007d81
 8007dc4:	08007f05 	.word	0x08007f05
 8007dc8:	08007e2f 	.word	0x08007e2f
 8007dcc:	08007ebf 	.word	0x08007ebf
 8007dd0:	08007d81 	.word	0x08007d81
 8007dd4:	08007d81 	.word	0x08007d81
 8007dd8:	08007f27 	.word	0x08007f27
 8007ddc:	08007d81 	.word	0x08007d81
 8007de0:	08007e2f 	.word	0x08007e2f
 8007de4:	08007d81 	.word	0x08007d81
 8007de8:	08007d81 	.word	0x08007d81
 8007dec:	08007ec7 	.word	0x08007ec7
 8007df0:	6833      	ldr	r3, [r6, #0]
 8007df2:	1d1a      	adds	r2, r3, #4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6032      	str	r2, [r6, #0]
 8007df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e00:	2301      	movs	r3, #1
 8007e02:	e09d      	b.n	8007f40 <_printf_i+0x1e8>
 8007e04:	6833      	ldr	r3, [r6, #0]
 8007e06:	6820      	ldr	r0, [r4, #0]
 8007e08:	1d19      	adds	r1, r3, #4
 8007e0a:	6031      	str	r1, [r6, #0]
 8007e0c:	0606      	lsls	r6, r0, #24
 8007e0e:	d501      	bpl.n	8007e14 <_printf_i+0xbc>
 8007e10:	681d      	ldr	r5, [r3, #0]
 8007e12:	e003      	b.n	8007e1c <_printf_i+0xc4>
 8007e14:	0645      	lsls	r5, r0, #25
 8007e16:	d5fb      	bpl.n	8007e10 <_printf_i+0xb8>
 8007e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e1c:	2d00      	cmp	r5, #0
 8007e1e:	da03      	bge.n	8007e28 <_printf_i+0xd0>
 8007e20:	232d      	movs	r3, #45	@ 0x2d
 8007e22:	426d      	negs	r5, r5
 8007e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e28:	4859      	ldr	r0, [pc, #356]	@ (8007f90 <_printf_i+0x238>)
 8007e2a:	230a      	movs	r3, #10
 8007e2c:	e011      	b.n	8007e52 <_printf_i+0xfa>
 8007e2e:	6821      	ldr	r1, [r4, #0]
 8007e30:	6833      	ldr	r3, [r6, #0]
 8007e32:	0608      	lsls	r0, r1, #24
 8007e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e38:	d402      	bmi.n	8007e40 <_printf_i+0xe8>
 8007e3a:	0649      	lsls	r1, r1, #25
 8007e3c:	bf48      	it	mi
 8007e3e:	b2ad      	uxthmi	r5, r5
 8007e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e42:	4853      	ldr	r0, [pc, #332]	@ (8007f90 <_printf_i+0x238>)
 8007e44:	6033      	str	r3, [r6, #0]
 8007e46:	bf14      	ite	ne
 8007e48:	230a      	movne	r3, #10
 8007e4a:	2308      	moveq	r3, #8
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e52:	6866      	ldr	r6, [r4, #4]
 8007e54:	60a6      	str	r6, [r4, #8]
 8007e56:	2e00      	cmp	r6, #0
 8007e58:	bfa2      	ittt	ge
 8007e5a:	6821      	ldrge	r1, [r4, #0]
 8007e5c:	f021 0104 	bicge.w	r1, r1, #4
 8007e60:	6021      	strge	r1, [r4, #0]
 8007e62:	b90d      	cbnz	r5, 8007e68 <_printf_i+0x110>
 8007e64:	2e00      	cmp	r6, #0
 8007e66:	d04b      	beq.n	8007f00 <_printf_i+0x1a8>
 8007e68:	4616      	mov	r6, r2
 8007e6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e6e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e72:	5dc7      	ldrb	r7, [r0, r7]
 8007e74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e78:	462f      	mov	r7, r5
 8007e7a:	42bb      	cmp	r3, r7
 8007e7c:	460d      	mov	r5, r1
 8007e7e:	d9f4      	bls.n	8007e6a <_printf_i+0x112>
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d10b      	bne.n	8007e9c <_printf_i+0x144>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	07df      	lsls	r7, r3, #31
 8007e88:	d508      	bpl.n	8007e9c <_printf_i+0x144>
 8007e8a:	6923      	ldr	r3, [r4, #16]
 8007e8c:	6861      	ldr	r1, [r4, #4]
 8007e8e:	4299      	cmp	r1, r3
 8007e90:	bfde      	ittt	le
 8007e92:	2330      	movle	r3, #48	@ 0x30
 8007e94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e9c:	1b92      	subs	r2, r2, r6
 8007e9e:	6122      	str	r2, [r4, #16]
 8007ea0:	f8cd a000 	str.w	sl, [sp]
 8007ea4:	464b      	mov	r3, r9
 8007ea6:	aa03      	add	r2, sp, #12
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4640      	mov	r0, r8
 8007eac:	f7ff fee6 	bl	8007c7c <_printf_common>
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d14a      	bne.n	8007f4a <_printf_i+0x1f2>
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	b004      	add	sp, #16
 8007eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	f043 0320 	orr.w	r3, r3, #32
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	4833      	ldr	r0, [pc, #204]	@ (8007f94 <_printf_i+0x23c>)
 8007ec8:	2778      	movs	r7, #120	@ 0x78
 8007eca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	6831      	ldr	r1, [r6, #0]
 8007ed2:	061f      	lsls	r7, r3, #24
 8007ed4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ed8:	d402      	bmi.n	8007ee0 <_printf_i+0x188>
 8007eda:	065f      	lsls	r7, r3, #25
 8007edc:	bf48      	it	mi
 8007ede:	b2ad      	uxthmi	r5, r5
 8007ee0:	6031      	str	r1, [r6, #0]
 8007ee2:	07d9      	lsls	r1, r3, #31
 8007ee4:	bf44      	itt	mi
 8007ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eea:	6023      	strmi	r3, [r4, #0]
 8007eec:	b11d      	cbz	r5, 8007ef6 <_printf_i+0x19e>
 8007eee:	2310      	movs	r3, #16
 8007ef0:	e7ac      	b.n	8007e4c <_printf_i+0xf4>
 8007ef2:	4827      	ldr	r0, [pc, #156]	@ (8007f90 <_printf_i+0x238>)
 8007ef4:	e7e9      	b.n	8007eca <_printf_i+0x172>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	f023 0320 	bic.w	r3, r3, #32
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	e7f6      	b.n	8007eee <_printf_i+0x196>
 8007f00:	4616      	mov	r6, r2
 8007f02:	e7bd      	b.n	8007e80 <_printf_i+0x128>
 8007f04:	6833      	ldr	r3, [r6, #0]
 8007f06:	6825      	ldr	r5, [r4, #0]
 8007f08:	6961      	ldr	r1, [r4, #20]
 8007f0a:	1d18      	adds	r0, r3, #4
 8007f0c:	6030      	str	r0, [r6, #0]
 8007f0e:	062e      	lsls	r6, r5, #24
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	d501      	bpl.n	8007f18 <_printf_i+0x1c0>
 8007f14:	6019      	str	r1, [r3, #0]
 8007f16:	e002      	b.n	8007f1e <_printf_i+0x1c6>
 8007f18:	0668      	lsls	r0, r5, #25
 8007f1a:	d5fb      	bpl.n	8007f14 <_printf_i+0x1bc>
 8007f1c:	8019      	strh	r1, [r3, #0]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	4616      	mov	r6, r2
 8007f24:	e7bc      	b.n	8007ea0 <_printf_i+0x148>
 8007f26:	6833      	ldr	r3, [r6, #0]
 8007f28:	1d1a      	adds	r2, r3, #4
 8007f2a:	6032      	str	r2, [r6, #0]
 8007f2c:	681e      	ldr	r6, [r3, #0]
 8007f2e:	6862      	ldr	r2, [r4, #4]
 8007f30:	2100      	movs	r1, #0
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7f8 f95c 	bl	80001f0 <memchr>
 8007f38:	b108      	cbz	r0, 8007f3e <_printf_i+0x1e6>
 8007f3a:	1b80      	subs	r0, r0, r6
 8007f3c:	6060      	str	r0, [r4, #4]
 8007f3e:	6863      	ldr	r3, [r4, #4]
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	2300      	movs	r3, #0
 8007f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f48:	e7aa      	b.n	8007ea0 <_printf_i+0x148>
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4640      	mov	r0, r8
 8007f52:	47d0      	blx	sl
 8007f54:	3001      	adds	r0, #1
 8007f56:	d0ad      	beq.n	8007eb4 <_printf_i+0x15c>
 8007f58:	6823      	ldr	r3, [r4, #0]
 8007f5a:	079b      	lsls	r3, r3, #30
 8007f5c:	d413      	bmi.n	8007f86 <_printf_i+0x22e>
 8007f5e:	68e0      	ldr	r0, [r4, #12]
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	4298      	cmp	r0, r3
 8007f64:	bfb8      	it	lt
 8007f66:	4618      	movlt	r0, r3
 8007f68:	e7a6      	b.n	8007eb8 <_printf_i+0x160>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	47d0      	blx	sl
 8007f74:	3001      	adds	r0, #1
 8007f76:	d09d      	beq.n	8007eb4 <_printf_i+0x15c>
 8007f78:	3501      	adds	r5, #1
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	9903      	ldr	r1, [sp, #12]
 8007f7e:	1a5b      	subs	r3, r3, r1
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	dcf2      	bgt.n	8007f6a <_printf_i+0x212>
 8007f84:	e7eb      	b.n	8007f5e <_printf_i+0x206>
 8007f86:	2500      	movs	r5, #0
 8007f88:	f104 0619 	add.w	r6, r4, #25
 8007f8c:	e7f5      	b.n	8007f7a <_printf_i+0x222>
 8007f8e:	bf00      	nop
 8007f90:	08008111 	.word	0x08008111
 8007f94:	08008122 	.word	0x08008122

08007f98 <memmove>:
 8007f98:	4288      	cmp	r0, r1
 8007f9a:	b510      	push	{r4, lr}
 8007f9c:	eb01 0402 	add.w	r4, r1, r2
 8007fa0:	d902      	bls.n	8007fa8 <memmove+0x10>
 8007fa2:	4284      	cmp	r4, r0
 8007fa4:	4623      	mov	r3, r4
 8007fa6:	d807      	bhi.n	8007fb8 <memmove+0x20>
 8007fa8:	1e43      	subs	r3, r0, #1
 8007faa:	42a1      	cmp	r1, r4
 8007fac:	d008      	beq.n	8007fc0 <memmove+0x28>
 8007fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fb6:	e7f8      	b.n	8007faa <memmove+0x12>
 8007fb8:	4402      	add	r2, r0
 8007fba:	4601      	mov	r1, r0
 8007fbc:	428a      	cmp	r2, r1
 8007fbe:	d100      	bne.n	8007fc2 <memmove+0x2a>
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fca:	e7f7      	b.n	8007fbc <memmove+0x24>

08007fcc <_sbrk_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d06      	ldr	r5, [pc, #24]	@ (8007fe8 <_sbrk_r+0x1c>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	f7f8 fc76 	bl	80008c8 <_sbrk>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_sbrk_r+0x1a>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_sbrk_r+0x1a>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	200016d4 	.word	0x200016d4

08007fec <memcpy>:
 8007fec:	440a      	add	r2, r1
 8007fee:	4291      	cmp	r1, r2
 8007ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ff4:	d100      	bne.n	8007ff8 <memcpy+0xc>
 8007ff6:	4770      	bx	lr
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008002:	4291      	cmp	r1, r2
 8008004:	d1f9      	bne.n	8007ffa <memcpy+0xe>
 8008006:	bd10      	pop	{r4, pc}

08008008 <_realloc_r>:
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	4680      	mov	r8, r0
 800800e:	4615      	mov	r5, r2
 8008010:	460c      	mov	r4, r1
 8008012:	b921      	cbnz	r1, 800801e <_realloc_r+0x16>
 8008014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008018:	4611      	mov	r1, r2
 800801a:	f7ff bc4b 	b.w	80078b4 <_malloc_r>
 800801e:	b92a      	cbnz	r2, 800802c <_realloc_r+0x24>
 8008020:	f7ff fbdc 	bl	80077dc <_free_r>
 8008024:	2400      	movs	r4, #0
 8008026:	4620      	mov	r0, r4
 8008028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802c:	f000 f81a 	bl	8008064 <_malloc_usable_size_r>
 8008030:	4285      	cmp	r5, r0
 8008032:	4606      	mov	r6, r0
 8008034:	d802      	bhi.n	800803c <_realloc_r+0x34>
 8008036:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800803a:	d8f4      	bhi.n	8008026 <_realloc_r+0x1e>
 800803c:	4629      	mov	r1, r5
 800803e:	4640      	mov	r0, r8
 8008040:	f7ff fc38 	bl	80078b4 <_malloc_r>
 8008044:	4607      	mov	r7, r0
 8008046:	2800      	cmp	r0, #0
 8008048:	d0ec      	beq.n	8008024 <_realloc_r+0x1c>
 800804a:	42b5      	cmp	r5, r6
 800804c:	462a      	mov	r2, r5
 800804e:	4621      	mov	r1, r4
 8008050:	bf28      	it	cs
 8008052:	4632      	movcs	r2, r6
 8008054:	f7ff ffca 	bl	8007fec <memcpy>
 8008058:	4621      	mov	r1, r4
 800805a:	4640      	mov	r0, r8
 800805c:	f7ff fbbe 	bl	80077dc <_free_r>
 8008060:	463c      	mov	r4, r7
 8008062:	e7e0      	b.n	8008026 <_realloc_r+0x1e>

08008064 <_malloc_usable_size_r>:
 8008064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008068:	1f18      	subs	r0, r3, #4
 800806a:	2b00      	cmp	r3, #0
 800806c:	bfbc      	itt	lt
 800806e:	580b      	ldrlt	r3, [r1, r0]
 8008070:	18c0      	addlt	r0, r0, r3
 8008072:	4770      	bx	lr

08008074 <_init>:
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	bf00      	nop
 8008078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800807a:	bc08      	pop	{r3}
 800807c:	469e      	mov	lr, r3
 800807e:	4770      	bx	lr

08008080 <_fini>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	bf00      	nop
 8008084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008086:	bc08      	pop	{r3}
 8008088:	469e      	mov	lr, r3
 800808a:	4770      	bx	lr
